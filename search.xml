<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[由一个简单Node服务引申的Node性能分析方法]]></title>
      <url>https://corey600.github.io/2016/12/15/node-performance-analysis/</url>
      <content type="html"><![CDATA[<h3 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h3><p>一个简单Node服务在500并发的压力下长期运行时会出现内存占用不断增长的问题。</p>
<h3 id="二、分析过程及方法"><a href="#二、分析过程及方法" class="headerlink" title="二、分析过程及方法"></a>二、分析过程及方法</h3><h4 id="1-性能压测工具http-load"><a href="#1-性能压测工具http-load" class="headerlink" title="1.性能压测工具http_load"></a>1.性能压测工具http_load</h4><p><a href="http://www.acme.com/software/http_load/" target="_blank" rel="external">http_load</a> 是用来测试web服务器吞吐量和负载的测试工具。使用方法示例如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 命令行执行</div><div class="line">$ ./http_load -rate 5 -seconds 10 urls.txt</div><div class="line"></div><div class="line">// 结果</div><div class="line">49 fetches, 2 max parallel, 289884 bytes, <span class="keyword">in</span> 10.0148 seconds</div><div class="line">5916 mean bytes/connection</div><div class="line">4.89274 fetches/sec, 28945.5 bytes/sec</div><div class="line">msecs/connect: 28.8932 mean, 44.243 max, 24.488 min</div><div class="line">msecs/first-response: 63.5362 mean, 81.624 max, 57.803 min</div><div class="line">HTTP response codes:</div><div class="line">  code 200 -- 49</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其中，urls.txt是一个文本文件，保存了需要请求的url连接。可包含的参数含义如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">全称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-p</td>
<td style="text-align:center">-parallel</td>
<td style="text-align:center">并发的用户进程数。</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:center">-fetches</td>
<td style="text-align:center">总计的访问次数</td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">-rate</td>
<td style="text-align:center">含义是每秒的访问频率</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">-seconds</td>
<td style="text-align:center">连续的访问时间</td>
</tr>
</tbody>
</table>
<p>本文需要500并发的长时间持续压力，可以运行如下的命令：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./http_load -p <span class="number">500</span> -f <span class="number">800000</span> ./urls.txt</div></pre></td></tr></table></figure>
<p>参考资料：<a href="https://my.oschina.net/chinacaptain/blog/309212" target="_blank" rel="external">通过http_load来测试服务器的性能</a></p>
<h4 id="2-使用node-inpector进行node程序debug"><a href="#2-使用node-inpector进行node程序debug" class="headerlink" title="2.使用node-inpector进行node程序debug"></a>2.使用node-inpector进行node程序debug</h4><p><a href="https://www.npmjs.com/package/node-inspector" target="_blank" rel="external">node-inpector</a> 是用于调试node应用程序的交互界面，类似chrome的开发者面板（Blink Developer Tools）。</p>
<p>使用方法：</p>
<p>(1) 使用npm安装node-inpector</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g <span class="keyword">node</span><span class="title">-inpector</span></div></pre></td></tr></table></figure>
<p>(2) 以debug模式运行node应用程序，比如我要运行一个node的服务：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">node</span> <span class="title">--debug</span> ./bin/www</div></pre></td></tr></table></figure>
<p>(3) 运行node-inpector</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">node</span><span class="title">-inpector</span></div><div class="line"></div><div class="line">// 结果</div><div class="line"><span class="keyword">Node</span> <span class="title">Inspector</span> v0.<span class="number">12.8</span></div><div class="line">Visit http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/?<span class="attr">port=</span><span class="number">5858</span> to <span class="literal">start</span> debugging.</div></pre></td></tr></table></figure>
<p>(4) 使用浏览器打开地址<code>http://127.0.0.1:8080/?port=5858</code>，界面如下：</p>
<p><img src="/images/20161215/node-inspector.png" alt="imge"></p>
<h4 id="3-抓取内存使用堆栈信息"><a href="#3-抓取内存使用堆栈信息" class="headerlink" title="3.抓取内存使用堆栈信息"></a>3.抓取内存使用堆栈信息</h4><p>在node-inpector的调试界面，选择<code>Profiles</code>选项卡，选择第三项<code>Record Heap Allocations</code>类型。其中，第一项是记录CPU运行信息，展示各个js函数运行的时间；第二项是记录内存堆快照；而第三项会记录一段时间内的内存堆信息。</p>
<p><img src="/images/20161215/profiles.png" alt="imge"></p>
<p>点击start按钮，并使用http_load开启压力测试。运行一段时间之后，点一左上角的红色圆形按钮（运行结束后变为灰色）。捕获到的快照信息展示如下：</p>
<p><img src="/images/20161215/snapshot.png" alt="imge"></p>
<p>如上图，时间轴中每个时间点的柱状图表示当时申请的内存数量，其中蓝色的部分表示当前使用的内存，灰色的部分表示曾经使用，但后来被释放的内存。时间轴下面是各个对象对内存的占用情况。可以在最下方看到该对象的信息。</p>
<p>可以看到，在时间轴的前部，表示过去时间的部分，还在存在少量蓝色的柱状，这部分就表示长时间没有被回收的内存。如果存在大量内存长期得不到回收，就很有可能发生了内存泄露。</p>
<p>分析方法可参考：<a href="http://www.open-open.com/lib/view/open1421734578984.html" target="_blank" rel="external">Chrome开发者工具之JavaScript内存分析</a></p>
<h3 id="三、问题原因及解决方式"><a href="#三、问题原因及解决方式" class="headerlink" title="三、问题原因及解决方式"></a>三、问题原因及解决方式</h3><p>问题原因：从内存堆栈分析，长期得不到释放的内存是和winston日志输出相关的。尝试关闭所有日志输出，内存果然不再增长。再多次尝试后发现其实是每次请求都要输出一条日志到本地磁盘，但是由于处理请求的并发数过大，磁盘IO来不及处理而堵塞，日志输出队列越堆越多，长期驻留内存。由于如果请求处理速率不变，磁盘IO一直处于来不及处理的状态，队列只能越来越长，内存就会不断增长。</p>
<p>解决方法：禁止每个请求都输出日志。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node </tag>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa和co的简单分析]]></title>
      <url>https://corey600.github.io/2016/09/28/koa-and-co/</url>
      <content type="html"><![CDATA[<h3 id="概述：简介及使用"><a href="#概述：简介及使用" class="headerlink" title="概述：简介及使用"></a>概述：简介及使用</h3><p><em>本文先介绍 koa 的简单使用和一些背景概念，已经了解的可以跳过直接到 co 和 koa 执行分析部分。</em></p>
<p>koa的简介如下：</p>
<blockquote>
<p>由 Express 原班人马打造的 koa，致力于成为一个更小、更健壮、更富有表现力的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升常用错误处理效率。Koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>
</blockquote>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a><strong>简单使用</strong></h4><p>使用 koa 构建一个 web 应用有多简单？先来看一个使用例子 <code>app.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">var</span> app = koa();</div><div class="line"></div><div class="line"><span class="comment">// 中间件</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.body = <span class="string">'Hello World'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行使用命令 <code>$ node ./app.js</code> 就能在本机的 <code>3000</code> 端口启动一个web服务。</p>
<p>这里查看 koa 源码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  debug(<span class="string">'listen'</span>);</div><div class="line">  <span class="keyword">var</span> server = http.createServer(<span class="keyword">this</span>.callback());</div><div class="line">  <span class="keyword">return</span> server.listen.apply(server, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以发现事实上上文的 <code>app.listen(3000);</code> 可以改写为</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(app.callback());</div><div class="line">server.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h4 id="级联代码"><a href="#级联代码" class="headerlink" title="级联代码"></a><strong>级联代码</strong></h4><blockquote>
<p>与 Connect 实现中间件的方法相对比，Koa 的做法不是简单的将控制权依次移交给一个又一个的中间件直到程序结束，Koa 执行代码的方式有点像回形针，用户请求通过中间件，遇到 yield next 关键字时，会被传递到下一个符合请求的路由（downstream），在 yield next 捕获不到下一个中间件时，逆序返回继续执行代码（upstream）。</p>
</blockquote>
<p>看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">var</span> app = koa();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>* <span class="title">fun_a</span>(<span class="params">next</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a-head'</span>);</div><div class="line">    <span class="keyword">yield</span> next;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a-tail'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>* <span class="title">fun_b</span>(<span class="params">next</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'b-head'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">    <span class="keyword">yield</span> next;</div><div class="line">    <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span> - start;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s - %s'</span>, <span class="keyword">this</span>.method, <span class="keyword">this</span>.url, ms);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'b-tail'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>* <span class="title">fun_c</span>(<span class="params">next</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.body = <span class="string">'Hello World'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>每处理一个请求，console就会输出：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a-head</div><div class="line"><span class="keyword">b-head</span></div><div class="line"><span class="symbol">GET</span> / - <span class="number">4</span></div><div class="line"><span class="keyword">b-tail</span></div><div class="line">a-tail</div></pre></td></tr></table></figure>
<p>观察执行结果，很容易理解程序的运行顺序。首先会执行第一个中间件，但当执行到 yield next 时，代码流会暂停执行这个中间件的剩余代码，转而切换到下一个被定义的中间件执行代码。直到执行到最后一个没有 yield next 的中间件，该中间件返回后，程序流会按反向顺序执行每个中间件的剩余代码。</p>
<p>这被称为<code>“洋葱”</code>结构。可以形象地使用下图来表示：</p>
<p><img src="/images/20160928/ycjg.png" alt="洋葱结构"></p>
<p>具体对应到上文的例子，图可以画成这样：</p>
<p><img src="/images/20160928/yangcong.png" alt="洋葱结构"></p>
<h4 id="处理异步操作"><a href="#处理异步操作" class="headerlink" title="处理异步操作"></a><strong>处理异步操作</strong></h4><p>首先将异步操作封装为 Promise</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncOne</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        doAsync(<span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(error)&#123;</div><div class="line">                reject(error);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                resolve(data);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在中间件中如下调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ret = <span class="keyword">yield</span> asyncOne();</div><div class="line"><span class="built_in">console</span>.log(ret);</div></pre></td></tr></table></figure>
<p>可以看到这样执行异步操作，从代码顺序上看和一般的同步执行代码已经很类似了，易于理解代码业务逻辑，并能避免被复杂的异步回调搞晕。但事实上代码还是异步执行的，不存在线程等待。阮一峰老师提到过<code>协程</code>的概念，了解一下有助于这里的理解。</p>
<p>但是这样做有一个缺点是多个异步操作都是等待上一个操作完成后才开始执行，事实上是强制顺序执行了。比如如下的代码，两个异步执行其实并没有依赖关系，完全可以并行执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ret1 = <span class="keyword">yield</span> asyncOne1();</div><div class="line"><span class="keyword">var</span> ret2 = <span class="keyword">yield</span> asyncOne2();</div><div class="line"><span class="built_in">console</span>.log(ret1, ret2);</div></pre></td></tr></table></figure>
<p>这种情况下可以将多个异步操作合并，内部还是异步执行，外部同步等待。可以使用 Promise.all 来包裹多个 Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncMulti</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([</div><div class="line">        asyncOne(), asyncOne()</div><div class="line">    ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在中间件中如下调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ret = <span class="keyword">yield</span> asyncMulti();</div><div class="line"><span class="built_in">console</span>.log(ret);</div></pre></td></tr></table></figure>
<h3 id="背景概念：遍历器和-Generator-函数"><a href="#背景概念：遍历器和-Generator-函数" class="headerlink" title="背景概念：遍历器和 Generator 函数"></a>背景概念：遍历器和 Generator 函数</h3><p>上文用到了关键字 yield，这是ES2015（ES6）中引入的概念，相关的概念还有 Iterator 遍历器和 Generator 函数。下面大部分的理解和解释都参考于阮一峰老师的《ECMAScript 6入门》一书。</p>
<p><em>下文还会更多提到异步回调和 Promise ，默认读者都了解，不再详述。</em></p>
<h4 id="Iterator-遍历器"><a href="#Iterator-遍历器" class="headerlink" title="Iterator 遍历器"></a><strong>Iterator 遍历器</strong></h4><p>遍历器是一种协议，只要符合这个协议就能完成遍历操作。ES6 的协议规定只要实现了 next 方法的对象都具备了遍历器的功能。next 方法返回的对象包含两属性，其中 value 表示当前遍历的值，done 是一个布尔值，表示是否遍历结束。</p>
<p>下面贴一个阮一峰老师书里的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> nextIndex &lt; array.length ?</div><div class="line">        &#123;<span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</div><div class="line">        &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line"></div><div class="line">it.next() <span class="comment">// &#123; value: "a", done: false &#125;</span></div><div class="line">it.next() <span class="comment">// &#123; value: "b", done: false &#125;</span></div><div class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>
<p>上文 makeIterator 是一个遍历器生成函数，实现数组的遍历，next 函数执行时移动指针并返回当前遍历的值。</p>
<p>ES6还规定了，只要部署了next方法，就可以用for…of循环遍历它的值。for…of 和 for…in 的区别是后者只能获取对象的键名，而前者直接遍历了键值。事实上，数组原生就部署了遍历器的接口，可以如下实现遍历</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr)&#123;</div><div class="line">    <span class="built_in">console</span>.log(v);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">red</span></div><div class="line"><span class="built_in">blue</span></div><div class="line">yellow</div></pre></td></tr></table></figure>
<h4 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a><strong>Generator 函数</strong></h4><blockquote>
<p>Generator函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同。执行Generator函数会返回一个遍历器对象，也就是说，Generator函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历Generator函数内部的每一个状态。</p>
</blockquote>
<p>Generator 函数事实上就是一个普通的函数，但是它有几点特殊：</p>
<ul>
<li>function 后面会有一个星号；</li>
<li>函数内部会使用 yield 定义状态，将函数分成几个部分；</li>
<li>函数运行结果返回一个遍历器。</li>
</ul>
<p>所以说Generator 函数就是一个遍历器生成器函数。</p>
<p>Generator 函数返回的遍历器有一个特殊的名字就叫 Generator。它是一个内部状态的遍历器，每一次遍历都是内部状态的一次改变，ES6引入这个特性之后就能控制函数内部的执行状态。</p>
<p>来看一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</div></pre></td></tr></table></figure>
<p>如是，hw就是一个 Generator（状态遍历器），遍历的执行结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>
<p>分析执行过程，我们可以看到 helloWorldGenerator 函数内部使用了两次 yield 关键字，它们将整个函数分成了三个部分，这三个部分以状态遍历器的形式作为函数返回结果被返回。当这个状态遍历器在被遍历时，每一次遍历就执行了函数的一个部分。yield 关键字后面的表达式值就是 next 方法的返回对象中的 value 值。当 done 为 true 时，表示函数内部的所有状态都已被执行。</p>
<p>事实上，我们可以把 Generator 函数理解为一种可以被暂停执行的函数，而使用遍历器的 next 方法控制函数的暂停和执行。</p>
<h4 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a><strong>next 方法的参数</strong></h4><p>next 方法是可以传入参数的，传入的参数将作为 yield 语句的执行结果。</p>
<p>先看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params">p</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(p);</div><div class="line">    <span class="keyword">var</span> a = <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">    <span class="keyword">var</span> b = <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">    <span class="built_in">console</span>.log(b);</div><div class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> hw = helloWorldGenerator(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(hw.next(<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(hw.next(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(hw.next(<span class="number">3</span>));</div><div class="line"><span class="built_in">console</span>.log(hw.next(<span class="number">4</span>));</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'hello'</span>, done: false &#125;</div><div class="line">2</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'world'</span>, done: false &#125;</div><div class="line">3</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'ending'</span>, done: true &#125;</div><div class="line">&#123; <span class="attribute">value</span>: undefined, done: true &#125;</div></pre></td></tr></table></figure>
<p>第一次遍历时，next 方法传入参数 <code>1</code>，并控制执行了第一部分代码，并返回了 yield 关键字后面的字符串作为 value 值。但是我们发现传入的 <code>1</code> 即没有给变量 <code>p</code> 也没有给变量 <code>a</code>，而是被丢掉了，而打印出来的 <code>p</code> 的值是 Generator 函数执行时传入的 <code>0</code>。第二次遍历时，next 方法传入参数 <code>2</code>，并控制执行了第二部分代码，此时我们才看到 next 传入的 <code>2</code> 作为 yield 语句的执行结果给了<code>a</code>。 </p>
<p>以图来理解更形象一点。</p>
<p><img src="/images/20160928/do.png" alt="next"></p>
<h4 id="yield-及-yield-语句"><a href="#yield-及-yield-语句" class="headerlink" title="yield 及 yield* 语句"></a><strong>yield 及 yield* 语句</strong></h4><p>yield 关键字上文已经讲到了，它后面跟的值将被直接作为 next 方法返回的 value 值。而当 yield 关键字后面跟的是 Generator 遍历器时，需要在 yield 后面加上星号 <code>*</code> 来表明。</p>
<p>还是用例子来解释它们之间的区别：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'red'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'blue'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'yellow'</span>;</div><div class="line">    <span class="keyword">yield</span> generator1();</div><div class="line">    <span class="keyword">yield</span> <span class="string">'grey'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> generator2())&#123;</div><div class="line">    sum ++;</div><div class="line">    <span class="built_in">console</span>.log(v);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">yellow</span></div><div class="line">&#123;&#125;</div><div class="line"><span class="attribute">grey</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>generator1() 函数被调用时返回一个状态遍历器，当在它之前的 yiled 关键字不使用星号时，这个状态遍历器直接被作为 next 方法返回的 value值（例子中没有显式地使用next，而用了for…of方式），状态遍历器无法序列化，所以在打印时只打印了<code>{}</code>。</p>
<p>然后来看使用星号的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'red'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'blue'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'yellow'</span>;</div><div class="line">    <span class="keyword">yield</span>* generator1();</div><div class="line">    <span class="keyword">yield</span> <span class="string">'grey'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> generator3())&#123;</div><div class="line">    sum ++;</div><div class="line">    <span class="built_in">console</span>.log(v);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yellow</div><div class="line"><span class="built_in">red</span></div><div class="line"><span class="built_in">blue</span></div><div class="line">grey</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<p>generator1 函数被调用时还是返回了一个状态遍历器，但是不再仅当成一个值，而是被当成了外层状态遍历器的一部分。generator3 返回的就是这个外层状态遍历器，可以看到外部遍历器被遍历了5次(当done为true时并不会执行循环体内的代码，左移遍历次数等于sum + 1)，但是 generator3 只被分成了 <code>4</code> 部分。我们可以将上面的过程理解为下面这样一个合并的函数，这样就可以理解 generator3 返回的状态遍历器为什么被遍历了5次了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'yellow'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'red'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'blue'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'grey'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Generator-在异步流程控制中的使用"><a href="#Generator-在异步流程控制中的使用" class="headerlink" title="Generator 在异步流程控制中的使用"></a><strong>Generator 在异步流程控制中的使用</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">asyncOne</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        request.get(&#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'http://www.baidu.com'</span></div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> <span class="title">optionalCallback</span>(<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'in'</span> + response.statusCode);</div><div class="line">            resolve(response.statusCode);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'step1'</span>);</div><div class="line">    <span class="keyword">yield</span> asyncOne();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'step2'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> hm = generator();</div><div class="line"><span class="keyword">var</span> promise = hm.next().value;</div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'out'</span> + data);</div><div class="line">    hm.next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="重要工具：流程控制执行器co"><a href="#重要工具：流程控制执行器co" class="headerlink" title="重要工具：流程控制执行器co"></a>重要工具：流程控制执行器co</h3><p>co 是 TJ 结合 Generator 和 Promise 编写的执行器，实现以类似同步代码的方式来执行异步代码。</p>
<p>上文说到Generator函数能生成一个迭代器，操作迭代器来使内部代码分步执行。那么当Generator函数内有一步为异步操作时，可以使用Promise来控制等待异步执行结束之后再执行下一步。这是co原理的简单理解，也是上文<code>Generator 在异步流程控制中的使用</code>中讲到的方式基于的原理。当然，TJ 大神用简洁完备的代码对其进行了封装。</p>
<p>一般使用例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(err.stack);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例如上文代码中，假设Promise.resolve(true);部分代码替换为封装了异步执行函数的Promise，那么该步next()执行的返回值就是这个Promise。外部将能由这个Promise获知到异步函数什么时候执行结束，然后再继续执行下一步。具体逻辑用下文的源码来分析。</p>
<p>co的代码总共只有200多行，而关键代码去掉注释甚至只有如下不到50行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">gen</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> gen === <span class="string">'function'</span>) gen = gen.apply(ctx, args);</div><div class="line">        <span class="keyword">if</span> (!gen || <span class="keyword">typeof</span> gen.next !== <span class="string">'function'</span>) <span class="keyword">return</span> resolve(gen);</div><div class="line"> </div><div class="line">        onFulfilled();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ret;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ret = gen.next(res);</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                <span class="keyword">return</span> reject(e);</div><div class="line">            &#125;</div><div class="line">            next(ret);</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ret;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ret = gen.throw(err);</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                <span class="keyword">return</span> reject(e);</div><div class="line">            &#125;</div><div class="line">            next(ret);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ret.done) <span class="keyword">return</span> resolve(ret.value);</div><div class="line">            <span class="keyword">var</span> value = toPromise.call(ctx, ret.value);</div><div class="line">            <span class="keyword">if</span> (value &amp;&amp; isPromise(value)) <span class="keyword">return</span> value.then(onFulfilled, onRejected);</div><div class="line">            <span class="keyword">return</span> onRejected(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'You may only yield a function, promise, generator, array, or object, '</span></div><div class="line">                + <span class="string">'but the following object was passed: "'</span> + <span class="built_in">String</span>(ret.value) + <span class="string">'"'</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>co函数传入的参数是一个Generator函数，而返回值是一个Promise。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="external">koa 中文文档</a></p>
<p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> koa </tag>
            
            <tag> co </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用node开发dubbo远程调用客户端]]></title>
      <url>https://corey600.github.io/2016/08/03/node-dubbo/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。</p>
</blockquote>
<h4 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h4><p>其中 Monitor 和 Container 暂时略过不讲：</p>
<ul>
<li><strong>Provider: 暴露服务的服务提供方。</strong></li>
<li><strong>Consumer: 调用远程服务的服务消费方。</strong></li>
<li><strong>Registry: 服务注册与发现的注册中心。</strong></li>
<li>Monitor: 统计服务的调用次调和调用时间的监控中心。</li>
<li>Container: 服务运行容器。</li>
</ul>
<p><img src="/images/20160803/dubbo-architecture.jpg" alt="architecture"></p>
<a id="more"></a>
<h4 id="调用关系说明"><a href="#调用关系说明" class="headerlink" title="调用关系说明"></a>调用关系说明</h4><ol>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
</ol>
<p><em>参考链接</em> : <a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E6%9E%B6%E6%9E%84" target="_blank" rel="external">dubbo架构</a></p>
<h3 id="部署dubbo环境"><a href="#部署dubbo环境" class="headerlink" title="部署dubbo环境"></a>部署dubbo环境</h3><p>系统环境需要 jdk1.7，如果是 centos，默认安装的是 openJDK，需要卸载后重新安装 jdk1.7。</p>
<p><em>下载链接</em> : <a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.8/zookeeper-3.4.8.tar.gz" target="_blank" rel="external">zookeeper</a> / <a href="http://apache.fayea.com/tomcat/tomcat-6/v6.0.45/bin/apache-tomcat-6.0.45.tar.gz" target="_blank" rel="external">tomcat</a></p>
<h4 id="zookeeper注册中心"><a href="#zookeeper注册中心" class="headerlink" title="zookeeper注册中心"></a>zookeeper注册中心</h4><p>解压安装</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tar</span> <span class="selector-tag">zxvf</span> <span class="selector-tag">zookeeper-3</span><span class="selector-class">.4</span><span class="selector-class">.8</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="selector-tag">cd</span> <span class="selector-tag">zookeeper-3</span><span class="selector-class">.4</span><span class="selector-class">.8</span></div></pre></td></tr></table></figure>
<p>创建配置文件</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> <span class="keyword">conf</span>/zoo.cfg</div></pre></td></tr></table></figure>
<p>修改zoo.cfg的内容如下</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tickTime</span>=<span class="number">2000</span></div><div class="line"><span class="attr">dataDir</span>=/var/lib/zookeeper</div><div class="line"><span class="attr">clientPort</span>=<span class="number">2181</span></div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/zkServer<span class="selector-class">.sh</span> start</div></pre></td></tr></table></figure>
<p>停止</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/zkServer<span class="selector-class">.sh</span> stop</div></pre></td></tr></table></figure>
<h4 id="使用tomcat启动管理控制台"><a href="#使用tomcat启动管理控制台" class="headerlink" title="使用tomcat启动管理控制台"></a>使用tomcat启动管理控制台</h4><p>解压安装tomcat，并删除默认的 webapps/ROOT 目录</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar zxvf apache-tomcat<span class="number">-6.0</span><span class="number">.45</span>.tar.gz</div><div class="line">cd apache-tomcat<span class="number">-6.0</span><span class="number">.45</span></div><div class="line">rm -rf webapps/ROOT</div></pre></td></tr></table></figure>
<p>将dubbo管理控制台包解压到 webapps/ROOT 目录</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip dubbo-admin<span class="number">-2.4</span><span class="number">.1</span>.war -d webapps/ROOT</div></pre></td></tr></table></figure>
<p>修改配置文件 webapps/ROOT/WEB-INF/dubbo.properties 为如下内容，因为和 zookeeper 注册中心部署在同一台机器，这里配置为本地地址 <code>zookeeper://127.0.0.1:2181</code> 就可以了</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo<span class="selector-class">.registry</span><span class="selector-class">.address</span>=zookeeper:<span class="comment">//127.0.0.1:2181</span></div><div class="line">dubbo<span class="selector-class">.admin</span><span class="selector-class">.root</span><span class="selector-class">.password</span>=root</div><div class="line">dubbo<span class="selector-class">.admin</span><span class="selector-class">.guest</span><span class="selector-class">.password</span>=guest</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.<span class="regexp">/bin/</span>startup.sh</div></pre></td></tr></table></figure>
<p>停止</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/<span class="built_in">shutdown</span>.sh</div></pre></td></tr></table></figure>
<p>访问 <code>http://127.0.0.1:8080/</code>: (用户:root,密码:root 或 用户:guest,密码:guest)</p>
<h3 id="简单的提供者和消费者"><a href="#简单的提供者和消费者" class="headerlink" title="简单的提供者和消费者"></a>简单的提供者和消费者</h3><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>定义服务接口: (该接口需单独打包，在服务提供方和消费方共享)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DemoService.java</span></div><div class="line"><span class="keyword">package</span> com.alibaba.dubbo.demo;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务提供方实现接口：(对服务消费方隐藏实现)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DemoServiceImpl.java</span></div><div class="line"><span class="keyword">package</span> com.alibaba.dubbo.demo.provider;</div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.demo.DemoService;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用Spring配置声明暴露服务：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- provider.xml --&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://code.alibabatech.com/schema/dubbo</div><div class="line">    http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"hello-world-app"</span>  /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"multicast://224.5.6.7:1234"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.dubbo.demo.provider.DemoServiceImpl"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>加载Spring配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Provider.java</span></div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String configLocation = <span class="string">"spring/dubbo-provider.xml"</span>;</div><div class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</div><div class="line">        context.start();</div><div class="line">        System.in.read(); <span class="comment">// 按任意键退出</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>通过Spring配置引用远程服务：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- consumer.xml --&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://code.alibabatech.com/schema/dubbo</div><div class="line">    http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"consumer-of-helloworld-app"</span>  /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"multicast://224.5.6.7:1234"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>加载Spring配置，并调用远程服务：(也可以使用IoC注入)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Consumer.java</span></div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.demo.DemoService;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String configLocation = <span class="string">"spring/dubbo-consumer.xml"</span>;</div><div class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</div><div class="line">        context.start();</div><div class="line">        DemoService demoService = (DemoService)context.getBean(<span class="string">"demoService"</span>); <span class="comment">// 获取 远程 服务代理</span></div><div class="line">        String hello = demoService.sayHello(<span class="string">"world"</span>); <span class="comment">// 执行远程方法</span></div><div class="line">        System.out.println( hello ); <span class="comment">// 显示调用结果</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>参考链接</em> : <a href="http://www.tuicool.com/articles/bYfIBfU" target="_blank" rel="external">Dubbo实例</a></p>
<h3 id="node客户端设计"><a href="#node客户端设计" class="headerlink" title="node客户端设计"></a>node客户端设计</h3><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p><img src="/images/20160803/dubbo.png" alt="dubbo"></p>
<h4 id="编解码及序列化"><a href="#编解码及序列化" class="headerlink" title="编解码及序列化"></a>编解码及序列化</h4><h5 id="发送的传输协议格式"><a href="#发送的传输协议格式" class="headerlink" title="发送的传输协议格式"></a>发送的传输协议格式</h5><p>协议头为定长 16个字节（128位）</p>
<ul>
<li>0 - 1B dubbo协议魔数(short) 固定为 0xda 0xbb</li>
<li>2 - 2B 消息标志位</li>
<li>3 - 3B 状态位</li>
<li>4 -11B 设置消息的id long类型</li>
<li>12 -15B 设置消息体body长度 int类型</li>
</ul>
<p>协议体为hessian2序列化后的数据，数据值按顺序依次为</p>
<ul>
<li><ol>
<li>dubbo的版本信息</li>
</ol>
</li>
<li><ol>
<li>服务接口名</li>
</ol>
</li>
<li><ol>
<li>服务的版本号</li>
</ol>
</li>
<li><ol>
<li>调服务的方法名</li>
</ol>
</li>
<li><ol>
<li>调服务的方法的参数描述符</li>
</ol>
</li>
<li><ol>
<li>遍历传输的参数值逐个序列化</li>
</ol>
</li>
<li><ol>
<li>将整个附属信息map对象attachments序列化</li>
</ol>
</li>
</ul>
<p>其中，方法的参数必须符合 java 类型表示的方法，具体可以参考模块说明： <a href="https://github.com/node-modules/js-to-java" target="_blank" rel="external">js-to-java</a></p>
<h5 id="接收的传输协议格式"><a href="#接收的传输协议格式" class="headerlink" title="接收的传输协议格式"></a>接收的传输协议格式</h5><p><img src="/images/20160803/dubbo_protocol_header.jpg" alt="parse"></p>
<p>其中 16-20位为序列化协议的类型ID，hessian2 的协议ID为 2，node客户端目前不支持其他的序列化协议。</p>
<p>其中 24-31未为状态位，具体值表示如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">value</th>
<th style="text-align:center">msg</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">‘ok’</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">‘clien side timeout’</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td style="text-align:center">‘server side timeout’</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">‘request format error’</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">‘response format error’</td>
</tr>
<tr>
<td style="text-align:center">60</td>
<td style="text-align:center">‘service not found’</td>
</tr>
<tr>
<td style="text-align:center">70</td>
<td style="text-align:center">‘service error’</td>
</tr>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">‘internal server error’</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">‘internal server error’</td>
</tr>
</tbody>
</table>
<p>协议体为hessian序列化后的数据，需要反序列化后读取。第一个读取的数据为整数，方法表示返回值类型，具体值表示如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 结果标志位为数据段第一个字节，为 0x90 0x91 0x92其中之一</span></div><div class="line"><span class="comment">// 实际为hessian协议的简化整数表示，反序列化后为： 0 1 2</span></div><div class="line">RESPONSE_WITH_EXCEPTION = <span class="number">0</span>; <span class="comment">// 返回的是java异常</span></div><div class="line">RESPONSE_VALUE = <span class="number">1</span>; <span class="comment">// 返回方法的返回值</span></div><div class="line">RESPONSE_NULL_VALUE = <span class="number">2</span>; <span class="comment">// 该方法没有返回值</span></div></pre></td></tr></table></figure>
<p>如果有，随后读取的就是具体的返回值数据，也符合 java 类型表示的方法。</p>
<h3 id="客户端实现源码"><a href="#客户端实现源码" class="headerlink" title="客户端实现源码"></a>客户端实现源码</h3><p><a href="https://github.com/Corey600/zoodubbo" target="_blank" rel="external">https://github.com/Corey600/zoodubbo</a></p>
<h3 id="Todo-List"><a href="#Todo-List" class="headerlink" title="Todo List"></a>Todo List</h3><ol>
<li>缓存服务列表，监听变化更新列表，不再每次都重新获取</li>
<li>使用连接池管理连接，添加负载均衡策略</li>
<li>累计调用次数和调用时间，定时发送统计数据到监控中心</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[私有NPM服务搭建]]></title>
      <url>https://corey600.github.io/2016/07/22/private-npm-service/</url>
      <content type="html"><![CDATA[<h3 id="简介与背景"><a href="#简介与背景" class="headerlink" title="简介与背景"></a>简介与背景</h3><p>由于官方的NPM库是完全开放的，任何人都可以浏览和下载，所以公司私有的、不便对外公开的node模块就没法上传和下载，也无法使用NPM的版本管理功能。这就需要在公司内部建立私有的NPM服务。</p>
<p>目前官方给出的解决方案是 <a href="https://github.com/npm/npm-registry-couchapp" target="_blank" rel="external">npm-registry-couchapp</a> + couchDB 的解决方案。但是couchDB的安装配置过程相对来说有点复杂。这里使用较简单快速的方法，也就是使用alibaba团队的 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">cnpmjs.org</a> 的方案。</p>
<p>cnpmjs.org 依赖环境如下，数据库只需要选择其中一种就可以：</p>
<a id="more"></a>
<blockquote>
<p>node &gt;=0.11.12, use –harmony<br>Databases: only required one type    </p>
<ul>
<li>sqlite3 &gt;= 3.0.2, we use sqlite3 by default    </li>
<li>MySQL &gt;= 0.5.0, include mysqld and mysql cli. I test on mysql@5.6.16.    </li>
<li>MariaDB    </li>
<li>PostgreSQL    </li>
</ul>
</blockquote>
<p>下文具体介绍安装部署过程，环境为 <code>CentOS 6.6</code> 。</p>
<h3 id="MySQL服务安装与配置"><a href="#MySQL服务安装与配置" class="headerlink" title="MySQL服务安装与配置"></a>MySQL服务安装与配置</h3><p>这里选择较为熟悉的 MySQL 来作为数据库服务。使用yum安装名利如下：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># sudo yum install -y mysql mysql-server</span></div></pre></td></tr></table></figure>
<p>MySQL 的服务名为 <code>mysqld</code> ，服务操作命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启服务</span></div><div class="line"><span class="meta"># sudo service mysqld start</span></div><div class="line"><span class="comment">// 停止服务</span></div><div class="line"><span class="meta"># sudo service mysqld stop</span></div><div class="line"><span class="comment">// 重启服务</span></div><div class="line"><span class="meta"># sudo service mysqld restart</span></div><div class="line"><span class="comment">// 查看服务</span></div><div class="line"><span class="meta"># sudo service mysqld status</span></div></pre></td></tr></table></figure>
<p>设置开启启动：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># sudo chkconfig --list | grep mysqld</span></div><div class="line"><span class="meta"># sudo chkconfig mysqld on</span></div></pre></td></tr></table></figure>
<p>MySQL 默认有一个 <code>root</code> 用户，密码为空，拥有全部操作权限，但是只能在本地登录。登录命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mysqsl -u root</span></div></pre></td></tr></table></figure>
<p>为了安全性，先给 <code>root</code> 用户设置一个密码再登录：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改密码</span></div><div class="line"><span class="meta"># mysqladmin -u root password 'new-password'</span></div><div class="line"><span class="comment">// 登录</span></div><div class="line"><span class="meta"># mysqsl -u root -pnew-password</span></div></pre></td></tr></table></figure>
<p>注意这里 <code>-p</code> 之后直接跟上密码，不要有空格。</p>
<p>如果要指定地址和端口登录：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysqsl -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -P <span class="number">3306</span> -u root -ppassword</div></pre></td></tr></table></figure>
<p>登录之后首先需要创建名为 <code>cnpmjs</code> 的数据库，这里的 <code>cnpmjs</code> 的名字可以自定，但是必须和下文在 cnpmjs.org 服务中配置的数据库名字一样。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建数据库</span></div><div class="line">&gt; <span class="keyword">create</span> database cnpmjs;</div><div class="line"><span class="comment">// 查看已有数据库</span></div><div class="line">&gt; <span class="keyword">show</span> databases;</div><div class="line"><span class="comment">// 更改当前使用数据库为 cnpmjs</span></div><div class="line">&gt; <span class="keyword">use</span> cnpmjs;</div></pre></td></tr></table></figure>
<p>这里说明 <code>root</code> 用户创建的数据库对其他用户是不可见的，需要将该数据库的权限配置给其他用户才可以。这里直接使用 <code>root</code> 用户，不需要这一步。</p>
<h3 id="cnpmjs-org-安装与配置"><a href="#cnpmjs-org-安装与配置" class="headerlink" title="cnpmjs.org 安装与配置"></a>cnpmjs.org 安装与配置</h3><p>首先需要到 github 地址 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">https://github.com/cnpm/cnpmjs.org</a> 下载源码，可以选择直接打包下载，也可以使用 <code>git clone</code> 下来。</p>
<p>解压进入源码目录。运行安装命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># sudo make install</span></div></pre></td></tr></table></figure>
<p>在安装前请保证本机的 <code>g++</code> 本版在 <code>4.8.1</code> 以上，否在在编译某些依赖的 npm native 模块时会无限出错。</p>
<p>安装完成后可以尝试运行 <code>make test</code> 命令测试。</p>
<p>然后 cp 一份 <code>config/index.js</code> 到 <code>config</code> 目录下，以自定义配置：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cp <span class="keyword">config</span>/index<span class="variable">.js</span> <span class="keyword">config</span>/<span class="keyword">config</span><span class="variable">.js</span></div><div class="line"><span class="comment">// 使用vim编辑配置</span></div><div class="line"># vim <span class="keyword">config</span>/<span class="keyword">config</span><span class="variable">.js</span></div></pre></td></tr></table></figure>
<p>需要修改的主要有如下几项。</p>
<h4 id="1-数据库设置"><a href="#1-数据库设置" class="headerlink" title="1. 数据库设置"></a>1. 数据库设置</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">database</span>: &#123;</div><div class="line">    <span class="attribute">db</span>: <span class="string">'cnpmjs'</span>,     <span class="comment">// 使用的数据库名称</span></div><div class="line">    <span class="attribute">username</span>: <span class="string">'root'</span>, <span class="comment">// 用户民</span></div><div class="line">    <span class="attribute">password</span>: <span class="string">'root'</span>, <span class="comment">// 密码</span></div><div class="line"></div><div class="line">    <span class="comment">// the sql dialect of the database</span></div><div class="line">    <span class="comment">// - currently supported: 'mysql', 'sqlite', 'postgres', 'mariadb'</span></div><div class="line">    <span class="attribute">dialect</span>: <span class="string">'mysql'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// custom host; default: 127.0.0.1</span></div><div class="line">    <span class="attribute">host</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// custom port; default: 3306</span></div><div class="line">    <span class="attribute">port</span>: <span class="number">3306</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="2-管理员设置"><a href="#2-管理员设置" class="headerlink" title="2. 管理员设置"></a>2. 管理员设置</h4><p>cnpmjs.org 默认只允许管理员用户 <code>publish</code> 模块至服务器。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">admins</span>: &#123;</div><div class="line">    <span class="comment">// name: email</span></div><div class="line">    <span class="attribute">fcx</span>: <span class="string">'fcx600@163.com'</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="3-允许启动的地址"><a href="#3-允许启动的地址" class="headerlink" title="3. 允许启动的地址"></a>3. 允许启动的地址</h4><p>如果这一项配置为 <code>127.0.0.1</code> 则只允许本地访问 npm 服务</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">bindingHost:</span> <span class="string">''</span>,</div></pre></td></tr></table></figure>
<h4 id="4-作用域设置"><a href="#4-作用域设置" class="headerlink" title="4. 作用域设置"></a>4. 作用域设置</h4><p>作用域是 npm 2.0 版本以后引入的概念.</p>
<blockquote>
<p>作用域是一种对相关包分组的办法，这样所有属于同一作用域的包都会装在相同的目录node_modules_base_dir/@myScope下，而公共包会装在node_modules_base_dir中。限定作用域的包跟其它包一样有一个名称；此外它还有作用域，用下面这种方式指定：<br><code>@somescope/somepackagename</code></p>
</blockquote>
<p>此项设置限制只有如下作用域的模块才被允许上传。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// registry scopes, <span class="keyword">if</span> don<span class="string">'t set, means do not support scopes</span></div><div class="line">scopes: [ '<span class="symbol">@scopes</span><span class="string">', '</span><span class="symbol">@scope</span><span class="string">' ],</span></div></pre></td></tr></table></figure>
<h4 id="5-同步模式设置"><a href="#5-同步模式设置" class="headerlink" title="5. 同步模式设置"></a>5. 同步模式设置</h4><p>同步模式决定私有 npm 库和 官方 npm 库的同步机制，这里设置为 <code>none</code> 。我们没有必要全量同步官方库，下文会描述一般模块使用官方库或者 <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>， 而私有模块使用私有库的方法。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">sync</span> <span class="keyword">mode</span> select</div><div class="line">// none: <span class="keyword">do</span> not <span class="keyword">sync</span> any module, proxy <span class="keyword">all</span> public modules from sourceNpmRegistry</div><div class="line">// exis<span class="variable">t:</span> <span class="keyword">only</span> <span class="keyword">sync</span> exist modules</div><div class="line">// <span class="keyword">al</span><span class="variable">l:</span> <span class="keyword">sync</span> <span class="keyword">all</span> modules</div><div class="line">syncMode<span class="variable">l:</span> <span class="string">'none'</span>, // <span class="string">'none'</span>, <span class="string">'all'</span>, <span class="string">'exist'</span></div></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动服务前还需要初始化数据库表。进入 cnpmjs.org 源码目录，登录 MySQL 数据库，运行如下命令：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用名为 cnpmjs 的数据库</span></div><div class="line">mysql&gt; <span class="keyword">use</span> <span class="title">cnpmjs</span>;</div><div class="line"><span class="comment">// 运行初始化脚本</span></div><div class="line">mysql&gt; source docs/db.sql</div></pre></td></tr></table></figure>
<p>然后退出数据库连接，运行命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># npm run start</span></div></pre></td></tr></table></figure>
<p>启动成功后，尝试访问：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// registry地址</span></div><div class="line"><span class="meta"># curl http:<span class="comment">//localhost:7001</span></span></div><div class="line"><span class="comment">// web 浏览地址</span></div><div class="line"><span class="meta"># curl http:<span class="comment">//localhost:7002</span></span></div></pre></td></tr></table></figure>
<h3 id="cnpm客户端使用"><a href="#cnpm客户端使用" class="headerlink" title="cnpm客户端使用"></a>cnpm客户端使用</h3><p>使用npm安装cnpm模块：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span></div></pre></td></tr></table></figure>
<p>这里不要直接修改全局 <code>registry</code> ，因为我们还要用默认的库来安装一般模块。单独给作用域设置 <code>registry</code> 后，只有这些作用域的包才会使用我们设置的私有npm。</p>
<p>单独给设置作用域设置私有npm库的 <code>registry</code>:</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cnpm config <span class="keyword">set</span> <span class="meta">@myco</span>:registry http:<span class="comment">//localhost:7001</span></div></pre></td></tr></table></figure>
<p>其中 <code>@myco</code> 是作用域，<code>http://localhost:7001</code> 是私有npm的 <code>registry</code> 地址。之后我们就可以使用 <code>cnpm install</code> 来安装依赖的，一般模块会使用默认库安装，作用域为 <code>@myco</code> 的模块会使用私有npm库安装。</p>
<p>如果要给私有npm库上传模块，首先要在服务配置里增加管理员，在cnpm使用管理员帐户登录：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cnpm login --registry=http:<span class="comment">//localhost:7001</span></span></div></pre></td></tr></table></figure>
<p>然后在模块的根目录下运行 <code>cnpm publish</code> 。</p>
<p>需要查看当前配置情况，可以查看用户目录下的 <code>.cnpmrc</code> (对于cnpm)或 <code>.npmrc</code> (对于npm)文件。</p>
<p>参考： <a href="https://docs.npmjs.com/misc/scope" target="_blank" rel="external">npm-scope</a></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> npm </tag>
            
            <tag> cnpm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp前端构建工作流]]></title>
      <url>https://corey600.github.io/2016/06/13/gulp-workflow/</url>
      <content type="html"><![CDATA[<p>在前端工程化中，目前最流行的是使用gulp构建前端代码。但gulp只是提供了一种流式的文件处理方式，具体的功能需要各种插件来实现。gulp插件种类繁多，各自实现了特定的功能，无法全部了解和熟悉，那么在决定构建方案的时候难免选择困难，无法快速准确地选择出自己需要插件。</p>
<p>但事实上一些常用的功能，已经有一些流行而成熟的插件被广泛地应用了，我们不需要自己大海捞针一样去搜寻和评估一大片插件才能选择到合适的插件。本文就是基于‘HTML5页面node化’的项目中使用到的插件，形成一个暂时较为通用的gulp构建工作流。随着项目的积累和深入，以后将会补充和修改。</p>
<p><em>注</em> ：gulp的基本使用方法将不会赘述。</p>
<h4 id="1-第一步-清理上次构建的目标目录"><a href="#1-第一步-清理上次构建的目标目录" class="headerlink" title="1. 第一步 - 清理上次构建的目标目录"></a>1. <em>第一步</em> - 清理上次构建的目标目录</h4><p>清理即是删除上次构建产生的文件。一般情况下，构建的目标目录需要和源码目录分开。这样在清理时，直接将构建的目标目录（这里为<code>dist</code>目录）下的所有文件删除即可。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    del([<span class="string">'dist/*'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-第二步-增加语法检查"><a href="#2-第二步-增加语法检查" class="headerlink" title="2. 第二步 - 增加语法检查"></a>2. <em>第二步</em> - 增加语法检查</h4><p>一般的集成开发环境会集成语法检查，而类似SublimeTest的一些文本编辑器则需要插件支持。这里直接在构建时，加入js语法检查，保证代码质量。</p>
<p>一般的js的语法检查工具有<code>jshint</code>、<code>jslint</code>和<code>eslint</code>等，各自的规则有所区别。这里使用<code>gulp-jshint</code>插件实现语法检查。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">        <span class="string">'public/**/*.js'</span>,</div><div class="line">    ])</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="3-第三步-处理图片"><a href="#3-第三步-处理图片" class="headerlink" title="3. 第三步 - 处理图片"></a>3. <em>第三步</em> - 处理图片</h4><p>一般情况下，处理图片可能涉及到的压缩和生成雪碧图等。这里还未有这部分需求，所以只做了md5文件名后缀的添加。其中<code>rev()</code>用于给文件名扩展名前增加一个md5后缀，为文件内容的hash值，<code>rev.manifest()</code>用于生成增加后缀名前后的文件路径映射表，用于文件名的替换。</p>
<p>为什么要使用md5文件名后缀？这里是基于文件缓存策略的考虑。<br>具体可以参考：<a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1/" target="_blank" rel="external">前端工程精粹（一）：静态资源版本更新与缓存</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">        <span class="string">'public/**/*.+(ico|png|jpeg|jpg|gif|svg)'</span></div><div class="line">    ])</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/manifest/img'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-第四步-处理样式文件"><a href="#4-第四步-处理样式文件" class="headerlink" title="4. 第四步 - 处理样式文件"></a>4. <em>第四步</em> - 处理样式文件</h4><p>相比于没有前端构建过程的原始方式，构建可以很方便的加入各种css预处理器，<code>Less</code>、<code>Sass</code>和<code>Stylus</code>都有对应的预处理gulp插件。这里选择了<code>gulp-less</code>插件作为less的处理器。并使用<code>gulp-minify-css</code>对处理后的css进行压缩。其中<code>gulp-rev-replace</code>插件用于将css中引用的图片文件路径替换为增md5后缀后的路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> replace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'less'</span>, [<span class="string">'image'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 读取 图片  的路径映射表</span></div><div class="line">    <span class="keyword">var</span> manifest = gulp.src(<span class="string">'dist/manifest/img/rev-manifest.json'</span>);</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">        <span class="string">'public/**/pages/**/*.less'</span>,</div><div class="line">        <span class="string">'public/**/common/styles/style.less'</span></div><div class="line">    ])</div><div class="line">        .pipe(rev())</div><div class="line">        <span class="comment">// css预处理</span></div><div class="line">        .pipe(less())</div><div class="line">        <span class="comment">// 替换图片引用路径</span></div><div class="line">        .pipe(replace(&#123;<span class="attr">manifest</span>: manifest, <span class="attr">prefix</span>: prefix&#125;))</div><div class="line">        <span class="comment">// 压缩css代码</span></div><div class="line">        .pipe(minifycss())</div><div class="line">        <span class="comment">// 生成到目标路径</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">        <span class="comment">// 生成css文件路径映射</span></div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/manifest/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="5-第五步-处理脚本文件"><a href="#5-第五步-处理脚本文件" class="headerlink" title="5. 第五步 - 处理脚本文件"></a>5. <em>第五步</em> - 处理脚本文件</h4><p>gulp可以直接处理js脚本文件的压缩合并等工作，但在考虑js代码的模块化时，还要引入require.js或者seajs等模块加载器的对应插件。我们知道，webpack本身就是一个完备的前端构建工具，而且引入了一种新的模块化解决方案。这里我们将使用webpack的处理变成一个gulp任务，利用它的js模块化方案和打包压缩等功能，其他事情交给gulp来处理。</p>
<p>在gulp中使用webpack，我们需要使用<code>webpack-stream</code>插件。它直接将<code>main</code>作为唯一的入口entry，但是我们的工程不是单页面的，这样显然不行。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'webpack'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([ <span class="string">'public/pages/**/*.js'</span> ])</div><div class="line">        .pipe(webpackStream(&#123;</div><div class="line">            <span class="attr">output</span>: &#123;</div><div class="line">                <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">module</span>: &#123;</div><div class="line">                <span class="attr">loaders</span>: [&#123;</div><div class="line">                    <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'babel-loader!jsx-loader?harmony'</span></div><div class="line">                &#125;]</div><div class="line">            &#125;</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>只生成了<code>dist</code>目录下的一个main.js文件。</p>
<p>为了将<code>gulp.src</code>中的文件直接作为webpack的entry，我们又引入了<code>vinyl-named</code>插件，它可以使用回调函数将文件路径中的匹配部分作为entry中的name配置。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'webpack'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">        <span class="string">'public/pages/**/*.js'</span></div><div class="line">    ])</div><div class="line">        .pipe(named(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> dir = path.dirname(file.path);</div><div class="line">            <span class="comment">// 替换掉 public 目录路径</span></div><div class="line">            dir = dir.replace(<span class="regexp">/^.*public(\\|\/)/</span>, <span class="string">''</span>);</div><div class="line">            <span class="comment">// 将文件路径及 basename 作为 name</span></div><div class="line">            <span class="keyword">return</span> path.join(dir, path.basename(file.path, path.extname(file.path)));</div><div class="line">        &#125;))</div><div class="line">        .pipe(webpackStream(&#123;</div><div class="line">            <span class="attr">output</span>: &#123;</div><div class="line">                <span class="comment">// 指定输出文件名</span></div><div class="line">                filename: <span class="string">'[name].js'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">module</span>: &#123;</div><div class="line">                <span class="comment">// 设置加载器</span></div><div class="line">                loaders: [&#123;</div><div class="line">                    <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'babel-loader!jsx-loader?harmony'</span></div><div class="line">                &#125;]</div><div class="line">            &#125;</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>生成了如下四个文件：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pages<span class="symbol">\s</span>afe_grade<span class="symbol">\i</span>ndex<span class="symbol">\i</span>ndex.js</div><div class="line">pages<span class="symbol">\s</span>afe_grade<span class="symbol">\u</span>ser_info<span class="symbol">\u</span>ser_info.js</div><div class="line">pages<span class="symbol">\s</span>afe_grade<span class="symbol">\v</span>ideo_store<span class="symbol">\v</span>ideo_store.js</div></pre></td></tr></table></figure>
<p>webpack要实现代码的压缩等功能也需要使用到插件，这里使用到两个功能：</p>
<p>(1) 代码压缩</p>
<p>使用时在plugins配置的列表中增加一项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">    <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mangle</span>: &#123;</div><div class="line">        <span class="attr">except</span>: [<span class="string">'$'</span>, <span class="string">'m'</span>, <span class="string">'window'</span>, <span class="string">'webpackJsonpCallback'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<p>其中mangle.except配置了在压缩过程中不被简化的变量，以防出现错误。<br>参考资料：<a href="http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin" target="_blank" rel="external">http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin</a></p>
<p>(2) 公共代码提取</p>
<p>使用时在plugins配置的列表中增加一项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'common/js/common'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'common/js/common.js'</span>,</div><div class="line">    <span class="attr">minChunks</span>: <span class="number">2</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参考资料：<a href="http://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin" target="_blank" rel="external">http://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin</a></p>
<p>代码构建及压缩后不容易阅读和调试，webpack也支持增加source map。只需设置devtool选项为’source-map’。当然，它还支持其他很多模式，具体可参考：<a href="http://www.07net01.com/2016/01/1120167.html" target="_blank" rel="external">webpack sourcemap 选项多种模式的一些解释</a></p>
<p>最终js构建代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> named = <span class="built_in">require</span>(<span class="string">'vinyl-named'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackStream = <span class="built_in">require</span>(<span class="string">'webpack-stream'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'webpack'</span>, [<span class="string">'image'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> revall = <span class="keyword">new</span> Revall(&#123;<span class="attr">hashLength</span>: <span class="number">10</span>&#125;);</div><div class="line">    <span class="keyword">var</span> manifest = gulp.src(<span class="string">'dist/manifest/img/rev-manifest.json'</span>);</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">        <span class="string">'public/pages/**/*.js'</span></div><div class="line">    ])</div><div class="line">        .pipe(named(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> dir = path.dirname(file.path);</div><div class="line">            dir = dir.replace(<span class="regexp">/^.*public(\\|\/)/</span>, <span class="string">''</span>);</div><div class="line">            <span class="keyword">return</span> path.join(dir, path.basename(file.path, path.extname(file.path)));</div><div class="line">        &#125;))</div><div class="line">        .pipe(webpackStream(&#123;</div><div class="line">            <span class="attr">output</span>: &#123;</div><div class="line">                <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">module</span>: &#123;</div><div class="line">                <span class="attr">loaders</span>: [&#123;</div><div class="line">                    <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'babel-loader!jsx-loader?harmony'</span></div><div class="line">                &#125;]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">plugins</span>: [</div><div class="line">                <span class="comment">// 使用生产环境版本'react'</span></div><div class="line">                <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">                    <span class="string">"process.env"</span>: &#123;</div><div class="line">                        <span class="attr">NODE_ENV</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"production"</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125;),</div><div class="line">                <span class="comment">//js文件的压缩</span></div><div class="line">                <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">                    <span class="attr">compress</span>: &#123;</div><div class="line">                        <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">mangle</span>: &#123;</div><div class="line">                        <span class="attr">except</span>: [<span class="string">'$'</span>, <span class="string">'m'</span>, <span class="string">'window'</span>, <span class="string">'webpackJsonpCallback'</span>]</div><div class="line">                    &#125;</div><div class="line">                &#125;),</div><div class="line">                <span class="comment">//将公共代码抽离出来合并为一个文件</span></div><div class="line">                <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">                    <span class="attr">name</span>: <span class="string">'common/js/common'</span>,</div><div class="line">                    <span class="attr">filename</span>: <span class="string">'common/js/common.js'</span>,</div><div class="line">                    <span class="attr">minChunks</span>: <span class="number">2</span></div><div class="line">                &#125;)</div><div class="line">            ],</div><div class="line">            <span class="attr">devtool</span>: <span class="string">'source-map'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(replace(&#123;<span class="attr">manifest</span>: manifest, <span class="attr">prefix</span>: prefix&#125;))</div><div class="line">        .pipe(revall.revision())</div><div class="line">        .pipe(gulp.dest(dest))</div><div class="line">        .pipe(revall.manifestFile())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/manifest/webpack'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="6-第六步-增加文件监听"><a href="#6-第六步-增加文件监听" class="headerlink" title="6. 第六步 - 增加文件监听"></a>6. <em>第六步</em> - 增加文件监听</h4><p>gulp已经为我们提供了监听的工具，就是<code>watch</code>接口。使用方法也很简单，参看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'default'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch([<span class="string">'public/**/*.+(ico|png|jpeg|jpg|gif|svg)'</span>], [<span class="string">'less'</span>, <span class="string">'webpack'</span>]);</div><div class="line">    gulp.watch([<span class="string">'public/**/*.less'</span>], [<span class="string">'less'</span>]);</div><div class="line">    gulp.watch([<span class="string">'public/**/*.js'</span>], [<span class="string">'js'</span>, <span class="string">'webpack'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><em>补充：</em></h4><p>暂无。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flash播放器研究]]></title>
      <url>https://corey600.github.io/2016/01/04/flash-player/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>原本 Web端 使用的 flash 播放器是 ckplayer，基本能满足当时的使用需求。但是，服务器端推流改为RTMP后，ckplayer 在 播放画面真正出现前会出现短暂的黑屏，这个问题没法解决，最后只能改为使用百度的 cyberplayer 播放器1.5版本。</p>
<p>百度播放器 可以设置onMeta事件 知道画面出现的真正时间，所以可以在画面出现前加一层loading的div覆盖播放器，等到画面出现时再隐藏这一层div。实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// metadata事件</span></div><div class="line">t5Player.onMeta(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(t5Player.getState() == <span class="string">'PLAYING'</span>)&#123;</div><div class="line">        sum++; <span class="comment">// 为避秒长时间显示loading 画面，使用sum设置等待时间上限</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((!!event.metadata.renderstate &amp;&amp; !!event.metadata.stagevideo) || sum == <span class="number">30</span>)&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// todo 隐藏 loading 画面          </span></div><div class="line">        &#125;,<span class="number">500</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在决定使用百度播放器前，还试用过 jwplayer 播放器。jwplayer是国外团队开发的比较成熟的Web播放器，支持完善的api接口，包括上文的metdata事件。但是免费版不支持hls流的播放，且不能用于商业活动，收费版需要授权使用。所以只能退而求其次，使用百度播放器。但是百度播放器的源码是不公开的，出了问题很难排查解决，在使用过程中确实遇到了一些问题，所以产生了需要自有的web播放器的需求。</p>
<a id="more"></a>
<p>但是从头开始开发一个web播放器需要投入很大的开发成本，然而由于jwplayer免费版的源码是公开的，预研的版本可以先参考jwplayer的源码，并尝试加入HLS流播放支持，实现一个基本满足目前要求的播放器。</p>
<h3 id="jwplayer-RTMP播放支持"><a href="#jwplayer-RTMP播放支持" class="headerlink" title="jwplayer - RTMP播放支持"></a>jwplayer - RTMP播放支持</h3><p>jwplayer播放器免费版本身就是支持RTMP流播放的。</p>
<h4 id="下载和编译"><a href="#下载和编译" class="headerlink" title="下载和编译"></a>下载和编译</h4><p>jwplayer免费版源码地址：<a href="https://github.com/jwplayer/jwplayer" target="_blank" rel="external">https://github.com/jwplayer/jwplayer</a></p>
<p>在编译jwplayer源码前，需要下载安装flash的开发环境 Flex SDK。目前Flex SDK 已经被 Adobe公司交给apache基金会管理，下载地址：<a href="http://flex.apache.org/download-binaries.html" target="_blank" rel="external">http://flex.apache.org/download-binaries.html</a></p>
<p>安装完成后设置环境变量 FLEX_HOME 的值为 安装根目录。</p>
<p>jwplayer的源码也是使用grunt构建的，解压后进入目录，按照官方提供的方法就能编译成功了。</p>
<blockquote>
<p>Build Instructions</p>
<ol>
<li>Install Node.js</li>
<li>Install Adobe AIR SDK - (安装了Flex SDK 就不需要 AIR SDK了，建议安装Flex SDK)</li>
<li>Install Java</li>
<li>Download player.swc 11.2</li>
<li>Rename and move the .swc file to {AIRSDK_Compiler}/frameworks/libs/player/11.2/playerglobal.swc</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># First time set up</div><div class="line">npm install -g grunt</div><div class="line">npm install</div><div class="line"># Build using</div><div class="line">grunt</div></pre></td></tr></table></figure>
<p>After build, the assets will be available in the bin-release folder.</p>
</blockquote>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>以7.0.1版本为例。</p>
<p>找到jwplayer源码目录下的src目录，这里存放的就是所有as3(flash的开发语言)/js和css的源码。flash目录存放了所有as后缀的as3源文件。js目录是js源码，包括html5的播放逻辑。css目录和templates目录是样式和模本，涉及播放器的界面样式，但不涉及播放逻辑。jwplayer源码使用webpack构建，所以css和模版不是直接引入页面，而是会被js/view目录下的文件依赖。</p>
<p><img src="/images/20160104/1.png" alt="图片"></p>
<h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><p>js源码的入口文件是jwplayer，主要关注api/controller/providers三个目录下的文件。</p>
<p><img src="/images/20160104/2.png" alt="图片"></p>
<p>api目录主要定义了一些对外的接口，入口是global-api.js。api-action.js和api-mutators.js是对controller的接口进行了直接透传，callback-deprecate.js是对controller的事件进行了直接透传，而需要另外进行一层处理的接口放在了api.js中。api-deprecate.js是对低版本接口的兼容定义。</p>
<p><img src="/images/20160104/3.png" alt="图片"></p>
<p>controller目录下代码是播放逻辑的处理，主要是controller.js文件。</p>
<p><img src="/images/20160104/4.png" alt="图片"></p>
<p>providers目录下的源码是对播放环境封装，主要是html5和flash，还包括jwplayer单独为youtube播放的封装，皆继承于default。入口是providers.js，providers-supported.js是播放环境的判断。</p>
<p>由于我们目前的需求只是pc web 端的flash播放，其实可以尝试把html5的支持去掉，只保留 default.js flash.js providers.js三个文件，并在providers.js中直接返回 flash 的provider，也不需要进行播放环境的判断了。providers.js如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">define([</div><div class="line">    <span class="string">'providers/flash'</span>,</div><div class="line">    <span class="string">'utils/helpers'</span>,</div><div class="line">    <span class="string">'utils/underscore'</span></div><div class="line">    ], <span class="function"><span class="keyword">function</span>(<span class="params">flash, utils, _</span>) </span>&#123;</div><div class="line">  </div><div class="line">    <span class="comment">// 判断是否是支持的播放类型</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">supports</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> flashExtensions = &#123;</div><div class="line">            <span class="string">'flv'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'f4v'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'mov'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'m4a'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'m4v'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'mp4'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'aac'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'f4a'</span>: <span class="string">'video'</span>,</div><div class="line">            <span class="string">'mp3'</span>: <span class="string">'sound'</span>,</div><div class="line">            <span class="string">'mpeg'</span>: <span class="string">'sound'</span>,</div><div class="line">            <span class="string">'smil'</span>: <span class="string">'rtmp'</span>,</div><div class="line">            <span class="string">'m3u8'</span>: <span class="string">'hls'</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> PLAYABLE = _.keys(flashExtensions);</div><div class="line">        <span class="keyword">if</span> (!utils.isFlashSupported()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="keyword">var</span> file = source.file;</div><div class="line">        <span class="keyword">var</span> type = source.type;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (utils.isRtmp(file, type)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span>(file.indexOf(<span class="string">'m3u8'</span>) === <span class="number">0</span> || type === <span class="string">'hls'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="keyword">return</span> _.contains(PLAYABLE, type);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Providers</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.config = config || &#123;&#125;;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    _.extend(Providers.prototype, &#123;</div><div class="line">        <span class="comment">// Find the name of the first provider which can support the media source-type</span></div><div class="line">        choose : <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">            <span class="comment">// prevent throw on missing source</span></div><div class="line">            source = _.isObject(source) ? source : &#123;&#125;;</div><div class="line">            <span class="keyword">if</span> (supports(source)) &#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">priority</span>: <span class="number">0</span>,</div><div class="line">                    <span class="attr">name</span> : <span class="string">'flash'</span>,</div><div class="line">                    <span class="attr">type</span>: source.type,</div><div class="line">                    <span class="comment">// If provider isn't loaded, this will be undefined</span></div><div class="line">                    provider : flash</div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> Providers;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h5><p>flash源码的入口时player目录的Player类。</p>
<p><img src="/images/20160104/5.png" alt="图片"></p>
<p>flash源码主要关注media目录下面的几个类。</p>
<p><img src="/images/20160104/6.png" alt="图片"></p>
<p>可以看到有RTMP/Sound/Video三种provider类，分别对应RTMP流直播支持，声音播放支持和视频点播支持。皆继承于MediaProvider类，IMediaProvider是对应接口类。所以，如果要加入HLS流直播支持，就需要加入一个HLSMediaProvider类，继承于MediaProvider类，并实现通用接口就可以了。当然，还要修改Provider选择的逻辑，使之在传入HLS 的播放URL时能正确选择对应Provider。</p>
<h3 id="flashls-HLS播放支持"><a href="#flashls-HLS播放支持" class="headerlink" title="flashls - HLS播放支持"></a>flashls - HLS播放支持</h3><p>flashls是开源的HLS播放库，源码地址：<a href="https://github.com/mangui/flashls" target="_blank" rel="external">https://github.com/mangui/flashls</a></p>
<p>官方提供了 Flowplayer 和 OSMF 的适配支持示例，虽然并没有作为jwplayer插件的使用支持，但是由于flashls的性质，我们可以直接在jwplayer源码中使用flashls。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>flashls使用文档：<a href="https://github.com/mangui/flashls/blob/dev/API.md" target="_blank" rel="external">https://github.com/mangui/flashls/blob/dev/API.md</a></p>
<p>拷贝flashls源码的org/mangui/hls目录下的所有文件至jwplayer工程下的对应路径，不存在的文件新建。</p>
<p>拷贝flashls源码的lib目录下的blooddy_crypto.swc文件至jwplayer工程下的lib目录下。</p>
<p>修改gruntfile文件，找到targetCompilerOptions配置，增加一项依赖库目录配置，修改后如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">targetCompilerOptions : [</div><div class="line"> <span class="string">'-compiler.library-path+='</span>+ <span class="string">'lib'</span>,</div><div class="line"> <span class="string">'-define+=FOXPLAYER::version,\''</span> + packageInfo.version + <span class="string">'\''</span></div><div class="line">],</div></pre></td></tr></table></figure>
<h4 id="修改jwplayer源码加入hls支持"><a href="#修改jwplayer源码加入hls支持" class="headerlink" title="修改jwplayer源码加入hls支持"></a>修改jwplayer源码加入hls支持</h4><p>第一步在media源码目录下新建一个名为HLSMediaProvider.as的文件，创建一个同名类，使之继承于MediaProvider</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HLSMediaProvider</span> <span class="keyword">extends</span> <span class="title">MediaProvider</span> </span>&#123;</div><div class="line"> <span class="comment">// 构造函数</span></div><div class="line"> public <span class="function"><span class="keyword">function</span> <span class="title">HLSMediaProvider</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">super</span>(<span class="string">'hls'</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改js源码的providers.js文件，使之对于hls格式的url能正确选择flash的provider。其中的supports接口修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断是否是支持的播放类型</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">supports</span>(<span class="params">source</span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> flashExtensions = &#123;</div><div class="line"> <span class="string">'flv'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'f4v'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'mov'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'m4a'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'m4v'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'mp4'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'aac'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'f4a'</span>: <span class="string">'video'</span>,</div><div class="line"> <span class="string">'mp3'</span>: <span class="string">'sound'</span>,</div><div class="line"> <span class="string">'mpeg'</span>: <span class="string">'sound'</span>,</div><div class="line"> <span class="string">'smil'</span>: <span class="string">'rtmp'</span>,</div><div class="line"> <span class="string">'m3u8'</span>: <span class="string">'hls'</span> <span class="comment">// 新增代码</span></div><div class="line"> &#125;;</div><div class="line"> <span class="keyword">var</span> PLAYABLE = _.keys(flashExtensions);</div><div class="line"> <span class="keyword">if</span> (!utils.isFlashSupported()) &#123;</div><div class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> file = source.file;</div><div class="line"> <span class="keyword">var</span> type = source.type;</div><div class="line"> </div><div class="line"> <span class="keyword">if</span> (utils.isRtmp(file, type)) &#123;</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">// 新增代码</span></div><div class="line"> <span class="keyword">if</span>(file.indexOf(<span class="string">'m3u8'</span>) === <span class="number">0</span> || type === <span class="string">'hls'</span>)&#123;</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">return</span> _.contains(PLAYABLE, type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改as3源码，model/Model.as文件中的setupMediaProviders方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected <span class="function"><span class="keyword">function</span> <span class="title">setupMediaProviders</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</div><div class="line">setMediaProvider(<span class="string">'default'</span>, <span class="keyword">new</span> MediaProvider(<span class="string">'default'</span>));</div><div class="line">setMediaProvider(<span class="string">'video'</span>, <span class="keyword">new</span> VideoMediaProvider());</div><div class="line">setMediaProvider(<span class="string">'rtmp'</span>, <span class="keyword">new</span> RTMPMediaProvider());</div><div class="line">setMediaProvider(<span class="string">'sound'</span>, <span class="keyword">new</span> SoundMediaProvider());</div><div class="line">setMediaProvider(<span class="string">'hls'</span>, <span class="keyword">new</span> HLSMediaProvider()); <span class="comment">// 新增代码</span></div><div class="line"> <span class="comment">// setActiveMediaProvider('default');</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改as3源码，model/InstreamPlayer.as文件中的getProvider方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private <span class="function"><span class="keyword">function</span> <span class="title">getProvider</span>(<span class="params">type:String</span>):<span class="title">MediaProvider</span> </span>&#123;</div><div class="line"> <span class="comment">// Only accept video, http or rtmp providers for now</span></div><div class="line"> <span class="keyword">switch</span> (type) &#123;</div><div class="line"> <span class="keyword">case</span> <span class="string">'video'</span>:</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> VideoMediaProvider();</div><div class="line"> <span class="keyword">case</span> <span class="string">'rtmp'</span>:</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> RTMPMediaProvider();</div><div class="line"> <span class="keyword">case</span> <span class="string">'sound'</span>:</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> SoundMediaProvider();</div><div class="line"> <span class="comment">// 新增代码</span></div><div class="line"> <span class="keyword">case</span> <span class="string">'hls'</span>:</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> HLSMediaProvider();</div><div class="line"> &#125;</div><div class="line"> <span class="comment">// ERROR</span></div><div class="line"> SwfEventRouter.triggerJsEvent(<span class="string">'instream:error'</span>, &#123;</div><div class="line"><span class="attr">message</span>: <span class="string">'Unsupported Instream Format; only video or rtmp are currently supported'</span></div><div class="line"> &#125;);</div><div class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还需要两处修改，model/PlaylistItem.as文件中的extensionMap和typeMap方法分别增加如下分支：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">"m3u8"</span>:</div><div class="line"> <span class="keyword">return</span> <span class="string">"hls"</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">"hls"</span>:</div><div class="line"> <span class="keyword">return</span> <span class="string">"hls"</span>;</div></pre></td></tr></table></figure>
<p>parsers/JWParser.as文件中的extensions对象增加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'ogv'</span>: <span class="string">'video'</span>,</div><div class="line"><span class="string">'m3u8'</span>: <span class="string">'hls'</span></div></pre></td></tr></table></figure>
<p>两项，getProvider方法的return ‘http’;修改为return ‘hls’。</p>
<p>最后最重要，也是最困难的就是使用flashls库给media/HLSMediaProvider.as增加通用的接口实现。</p>
<p>全部开发完毕，运行grunt编译成功得到的flash文件和js文件使用时就可以支持hls直播播放了。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flash </tag>
            
            <tag> 播放器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用vagrant虚拟机开发调试]]></title>
      <url>https://corey600.github.io/2015/08/11/vagrant-instructions/</url>
      <content type="html"><![CDATA[<h3 id="vagrant介绍和简单使用"><a href="#vagrant介绍和简单使用" class="headerlink" title="vagrant介绍和简单使用"></a>vagrant介绍和简单使用</h3><h4 id="vagrant介绍"><a href="#vagrant介绍" class="headerlink" title="vagrant介绍"></a>vagrant介绍</h4><p>百度百科：</p>
<blockquote>
<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。</p>
</blockquote>
<p>通俗讲vagrant就是用于管理虚拟机的，但是需要依赖虚拟化软件的支持，比如Oracle的VirtualBox（常用）或者VMwave。它还可以配合puppet或者chef自动化配置环境。</p>
<h4 id="安装和下载"><a href="#安装和下载" class="headerlink" title="安装和下载"></a>安装和下载</h4><ul>
<li>虚拟机VirtualBox</li>
</ul>
<p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">https://www.virtualbox.org/wiki/Downloads</a></p>
<p>建议使用4.3.12版本，不要安装最新版。安装流程直接按照提示一直下一步。</p>
<ul>
<li>安装Vagrant</li>
</ul>
<a id="more"></a>
<p>下载地址：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">https://www.vagrantup.com/downloads.html</a></p>
<p>也是直接按照提示下一步完成安装。</p>
<ul>
<li>下载所需系统环境对应的box</li>
</ul>
<p>下载地址：<a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a></p>
<p>本例使用的是名为opscode_centos-6.5-i386_chef-provisionerless.box的box，即环境为centos 6.5 i386。</p>
<p>vagrant可以将一个虚拟机环境打包，供团队内开发者分发使用，保证相同的开发环境，避免重复配置。 所谓的box文件，就是vagrant将虚拟环境打包后生成的包。这里使用他人打包的标准系统环境，vagrant官网列出了可下载的box文件。当然，也可以自己手动从系统镜像安装开始配置系统环境，然后再打包成box文件。</p>
<p>这里需要注意的是，32位的宿主机环境是无法启动64位虚拟机的，但是64位宿主机可以启动32位虚拟机。</p>
<h4 id="初始化vagrant"><a href="#初始化vagrant" class="headerlink" title="初始化vagrant"></a>初始化vagrant</h4><p>选择宿主机下的一个目录作为开发目录，同时该目录将默认作为和虚拟机的共享目录。</p>
<p>开启命令行进入该目录，运行vagrant初始化命令“vagrant init”,之后该目录下会生成名为“Vagrantfile”的默认配置文件。</p>
<p><img src="/images/20150811/1.png" alt="基本界面"></p>
<h4 id="添加一个box"><a href="#添加一个box" class="headerlink" title="添加一个box"></a>添加一个box</h4><p>在开发目录下运行命令“vagrant box add base opscode_centos-6.5-i386_chef-provisionerless.box”，其中“base”是该box的名称，“xxx.box”是对应导入的box文件，可以是当前目录下的也可以带路径的，当然也可以是网络下载路径，但是下载可能较慢，建议下载之后导入。</p>
<p>运行“vagrant box list”可以查看当前已添加的box列表。</p>
<p><img src="/images/20150811/2.png" alt="基本界面"></p>
<h4 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h4><p>虚拟机启动前首先需要修改配置文件Vagrantfile。这里仅需要关注两个配置项，其他配置项需要使用时参见文件内说明或参见vagrant官网说明。</p>
<ul>
<li>当前虚拟机使用的box</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Every Vagrant virtual environment requires a box to build off of.</span></div><div class="line"><span class="built_in">config</span>.vm.<span class="keyword">box </span>= <span class="string">"base"</span></div></pre></td></tr></table></figure>
<p>其中，base表示对应已添加box列表中的一个box名称。</p>
<ul>
<li>网络配置</li>
</ul>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></div><div class="line"><span class="comment"># within the machine from a port on the host machine. In the example below, </span></div><div class="line"><span class="comment"># accessing "localhost:8080" will access port 80 on the guest machine. </span></div><div class="line"><span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span></div><div class="line"> </div><div class="line"><span class="comment"># Create a private network, which allows host-only access to the machine </span></div><div class="line"><span class="comment"># using a specific IP. </span></div><div class="line"><span class="comment"># config.vm.network "private_network", ip: "192.168.33.10"</span></div><div class="line"> </div><div class="line"><span class="comment"># Create a public network, which generally matched to bridged network. </span></div><div class="line"><span class="comment"># Bridged networks make the machine appear as another physical device on </span></div><div class="line"><span class="comment"># your network. </span></div><div class="line"><span class="comment"># config.vm.network "public_network"</span></div></pre></td></tr></table></figure>
<p>以上分别是端口映射，私有网络，公有网络三种网络配置的注释说明，需要使用哪种网络模式只需去掉代表注释的#符号，然后配置相应地址。</p>
<p><em>端口映射</em>：就是将宿主机的一个端口A映射到虚拟机特定端口B，访问宿主机端口A就是访问虚拟机端口B。<br><em>私有网络</em>：给虚拟机配置一个IP地址，但是只有宿主机可以使用该地址访问该虚拟机。<br><em>公有网络</em>：给虚拟机配置一个宿主机所在网段的IP地址，可以虚拟机当作宿主机所在局域网的一台终端，宿主机和该局域网内的其他终端都可以访问该虚拟机。</p>
<p>如果只需在宿主机上访问虚拟机，网络配置使用默认即可，不必添加。vagrant会默认将宿主机的localhost:2222地址映射到虚拟机的22端口，方便ssh远程登录。</p>
<p>配置完成后输入命令“vagrant up”启动虚拟机。第一次启动较慢。</p>
<p><img src="/images/20150811/3.png" alt="基本界面"></p>
<p>可以看到，上图中将默认映射的宿主机2222端口改成了2200，因为演示前已经打开过一个虚拟机，2222端口已经被占用了。</p>
<h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p>安装xshell客户端，配置ssh地址为127.0.0.1:2200并链接即可。登录名和密码都为vagrant。</p>
<h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><p>如果vagrant启动的时候报如下错误：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">The following SSH <span class="keyword">command</span> <span class="title">responded</span> <span class="title">with</span> <span class="title">a</span> <span class="title">non-zero</span> <span class="title">exit</span> <span class="title">status</span>.</div><div class="line">Vagrant assumes that this means <span class="keyword">the</span> <span class="keyword">command</span> <span class="title">failed</span>!</div><div class="line"> </div><div class="line">ARPCHECK=no /sbin/ifup eth1 <span class="number">2</span>&gt; /dev/<span class="literal">null</span></div><div class="line"> </div><div class="line">Stdout <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">command</span>:</div><div class="line"> </div><div class="line">Device eth1 does <span class="keyword">not</span> seem <span class="built_in">to</span> be present, delaying initialization.</div><div class="line"> </div><div class="line"> </div><div class="line">Stderr <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">command</span>:</div></pre></td></tr></table></figure>
<p>此时虚拟机是已经启动了的，只要使用ssh登录，在命令行执行如下命令再重启即可。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rm -f <span class="regexp">/etc/u</span>dev<span class="regexp">/rules.d/</span><span class="number">70</span>-persistent-net.rules</div></pre></td></tr></table></figure>
<p>问题原因：</p>
<blockquote>
<p>问题就处在在持久网络设备udev规则（persistent network device udev rules）是被原VM设置好的，再用box生成新VM时，这些rules需要被更新。而这和Vagrantfile里对新VM设置private network的指令发生冲突。删除再次启动就没问题了。</p>
</blockquote>
<h3 id="使用nfs服务挂载路由器"><a href="#使用nfs服务挂载路由器" class="headerlink" title="使用nfs服务挂载路由器"></a>使用nfs服务挂载路由器</h3><h4 id="安装nfs服务"><a href="#安装nfs服务" class="headerlink" title="安装nfs服务"></a>安装nfs服务</h4><p>首先需要在虚拟机中安装nfs服务器。由于windows环境不支持安装nfs服务器，所以不得不需要像上文一样安装虚拟机来使用。</p>
<p>在命令行执行如下命令以安装nfs服务：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum <span class="keyword">install</span> -y nfs-utils rpcbind</div></pre></td></tr></table></figure></p>
<p>其中 nfs-utils 是nfs服务的对应安装包，而 rpcbind 是 nfs 的依赖服务，关于 rpcbind 的解释：</p>
<blockquote>
<p>他是一个RPC服务，主要是在nfs共享时候负责通知客户端，服务器的nfs端口号的。简单理解rpc就是一个中介服务。</p>
</blockquote>
<h4 id="启动、停止和查询服务状态"><a href="#启动、停止和查询服务状态" class="headerlink" title="启动、停止和查询服务状态"></a>启动、停止和查询服务状态</h4><ul>
<li>启动服务</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo service rpcbind <span class="literal">start</span></div><div class="line">$ sudo service nfs <span class="literal">start</span></div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo service rpcbind <span class="built_in">stop</span></div><div class="line">$ sudo service nfs <span class="built_in">stop</span></div></pre></td></tr></table></figure>
<ul>
<li>查询服务状态</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo service rpcbind status</div><div class="line"><span class="variable">$ </span>sudo service nfs status</div></pre></td></tr></table></figure>
<h4 id="挂载配置"><a href="#挂载配置" class="headerlink" title="挂载配置"></a>挂载配置</h4><p>执行如下命令打开文件：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi <span class="regexp">/etc/</span>exports</div></pre></td></tr></table></figure>
<p>编辑该文件，在文件末尾添加一行：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/ <span class="number">192.168</span><span class="number">.7</span><span class="number">.1</span>(rw,no_root_squash,no_all_squash,sync)</div></pre></td></tr></table></figure>
<p>其中 <code>/html/</code> 是linux下被挂载的目录。IP <code>192.168.7.1</code> 地址是允许挂载的客户机地址，这里就是路由的局域网IP地址。括号中的内容是 读写和权限配置，使用示例里的规则就可以了。</p>
<p>nfs服务每要被一个客户机挂载就需要在 <code>/etc/exports</code> 文件中配置一条规则，否则挂载连接会拒绝。</p>
<p>权限规则配置完成后，执行下面的命令使之生效：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>exportfs -r</div></pre></td></tr></table></figure>
<h4 id="执行挂载"><a href="#执行挂载" class="headerlink" title="执行挂载"></a>执行挂载</h4><p>上文配置的规则中，被挂载的目录 <code>/html/</code> 如果不存在的话需要手动创建：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="built_in">mkdir</span> /html/</div></pre></td></tr></table></figure>
<p>由于将挂载目录创建在了根目录下，目录需要配置权限才能正常工作，使用chmod 777命令获取全部权限（这么做其实并不合适，慎用）：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">777</span> /html</div></pre></td></tr></table></figure>
<p>现在可以在客户机命令行执行挂载命令了。</p>
<p>创建对应挂载目录：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> /tmp/nfs</div></pre></td></tr></table></figure>
<p>挂载：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mount -t nfs <span class="number">192.168</span>.<span class="number">1.188</span><span class="symbol">:/html</span> /tmp/nfs  -o nolock</div></pre></td></tr></table></figure>
<p>其中 IP地址 <code>192.168.1.188</code> 是服务器弟子，<code>/html</code>是服务器上被挂载的目录，即上文创建的 <code>/html</code> 目录。<code>/tmp/nfs</code> 是客户机上被挂载的目录。</p>
<p>执行成功后，客户机的 <code>/tmp/nfs</code> 目录和 <code>/html</code> 目录就可以实现共享。路由的本地页面代码可以直接保存到服务器的 <code>/html</code> 目录，然后通过路由来访问。 </p>
<h3 id="配置fis的远程部署"><a href="#配置fis的远程部署" class="headerlink" title="配置fis的远程部署"></a>配置fis的远程部署</h3><p>进行到这里，如果要在本地开发路由器本地配置的web页面还是不方便。每次修改需要手动把文件复制到虚拟机的 <code>/html</code> 目录下面。但是项目使用的fis构建工具可以很好的解决这个问题，它既有的远程部署的功能能自动将构建好的文件上传到我们的虚拟机对应目录下。</p>
<h4 id="安装php服务环境"><a href="#安装php服务环境" class="headerlink" title="安装php服务环境"></a>安装php服务环境</h4><ul>
<li>安装http服务apache</li>
</ul>
<p>命令行执行安装命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum <span class="keyword">install</span> -y httpd</div></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/httpd start</span></div></pre></td></tr></table></figure>
<p>停止服务：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /etc/init.d/httpd <span class="built_in">stop</span></div></pre></td></tr></table></figure>
<p>查看服务状态：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/httpd status</span></div></pre></td></tr></table></figure>
<p>在浏览器输入服务器地址，看到带有类似 <code>Apache 2 Test Page</code> 的页面，就表示服务运行正常。</p>
<p><img src="/images/20150811/httpd.png" alt="基本界面"></p>
<ul>
<li>安装php</li>
</ul>
<p>命令行执行安装命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum <span class="keyword">install</span> -y php php-devel</div></pre></td></tr></table></figure>
<p>重启apache使php生效</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/httpd restart</span></div></pre></td></tr></table></figure>
<p>在目录 <code>/var/www/html/</code> 下建立一个名为 <code>info.php</code> 的文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure>
<p>在浏览器输入 <code>服务器地址/info.php</code>，看到带有php版本和配置信息的页面，就表示php环境运行正常。</p>
<p><img src="/images/20150811/php.png" alt="基本界面"></p>
<h4 id="部署fis的远程文件接收程序"><a href="#部署fis的远程文件接收程序" class="headerlink" title="部署fis的远程文件接收程序"></a>部署fis的远程文件接收程序</h4><p>在上文提到的 <code>/var/www/html/</code> 目录下新建一个名为 <code>receiver.php</code> 的文件，编辑内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">@error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_WARNING);</div><div class="line"><span class="keyword">function</span> mkdirs(<span class="variable">$path</span>, <span class="variable">$mod</span> = 0777) &#123;</div><div class="line">    <span class="keyword">if</span> (is_dir(<span class="variable">$path</span>)) &#123;</div><div class="line">        <span class="built_in">return</span> chmod(<span class="variable">$path</span>, <span class="variable">$mod</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="variable">$old</span> = <span class="built_in">umask</span>(0);</div><div class="line">        <span class="keyword">if</span>(mkdir(<span class="variable">$path</span>, <span class="variable">$mod</span>, <span class="literal">true</span>) &amp;&amp; is_dir(<span class="variable">$path</span>))&#123;</div><div class="line">            <span class="built_in">umask</span>(<span class="variable">$old</span>);</div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">umask</span>(<span class="variable">$old</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'to'</span>])&#123;</div><div class="line">    <span class="variable">$to</span> = urldecode(<span class="variable">$_POST</span>[<span class="string">'to'</span>]);</div><div class="line">    <span class="keyword">if</span>(is_dir(<span class="variable">$to</span>) || <span class="variable">$_FILES</span>[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; 0)&#123;</div><div class="line">        header(<span class="string">"Status: 500 Internal Server Error"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(file_exists(<span class="variable">$to</span>))&#123;</div><div class="line">            unlink(<span class="variable">$to</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="variable">$dir</span> = dirname(<span class="variable">$to</span>);</div><div class="line">            <span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</div><div class="line">                mkdirs(<span class="variable">$dir</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">echo</span> move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="variable">$to</span>) ? 0 : 1;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">'I\'</span>m ready <span class="keyword">for</span> that, you know.<span class="string">';</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在浏览器输入 <code>服务器地址/receiver.php</code>，看到 <code>I&#39;m ready for that, you know.</code>这样的文字，就表示接收程序已经准备就绪。</p>
<p><img src="/images/20150811/receiver.png" alt="基本界面"></p>
<h4 id="修改fis配置文件并构建部署"><a href="#修改fis配置文件并构建部署" class="headerlink" title="修改fis配置文件并构建部署"></a>修改fis配置文件并构建部署</h4><p>打开fis的项目配置文件 <code>fis-conf.js</code>，加入如下的远程部署配置：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fis的配置文件</span></div><div class="line"><span class="selector-tag">fis</span><span class="selector-class">.config</span><span class="selector-class">.merge</span>(&#123;</div><div class="line">    <span class="comment">// 部署配置</span></div><div class="line">    <span class="attribute">deploy</span>: &#123;</div><div class="line">        <span class="attribute">remote</span>: &#123;</div><div class="line">            <span class="attribute">receiver</span>: <span class="string">'http://192.168.7.188/receiver.php'</span>,</div><div class="line">            <span class="attribute">to</span>: <span class="string">'/html/'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>构建时使用如下命令：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fis <span class="built_in">release</span> -d remote</div></pre></td></tr></table></figure>
<p>远程部署在上传文件时偶尔会出错失败，原因未知，但是一般再次尝试后成功。</p>
<h3 id="使用iptables的nat表将路由暴露到内网"><a href="#使用iptables的nat表将路由暴露到内网" class="headerlink" title="使用iptables的nat表将路由暴露到内网"></a>使用iptables的nat表将路由暴露到内网</h3><p>进行这一步，已经能够很方便的进行开发了。但是还有一个问题是路由器设备资源有限，不能做到人手一台。而且整个开发环境是在局域网内搭建，外部网络终端无法直接访问路由器的配置页面，这样也就无法使用 fiddler 这样的工具将代码重定向到本地进行调试开发。</p>
<p>但是 vagrant 是自带端口映射配置的，只要宿主机有一个暴露到外网的网卡和地址，外部终端就可以通过端口映射访问虚拟机。然后再虚拟机中再使用 iptables 加一层端口映射到路由，就能使外部终端可以访问局域网内的路由的本地配置页面。</p>
<h4 id="宿主机映射到虚拟机"><a href="#宿主机映射到虚拟机" class="headerlink" title="宿主机映射到虚拟机"></a>宿主机映射到虚拟机</h4><p>首先将宿主机的 11001 端口映射到虚拟机的 11001 端口，修改vagrant工作目录下的配置文件 <code>Vagrantfile</code>，添加如下配置：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config<span class="selector-class">.vm</span><span class="selector-class">.network</span> <span class="string">"forwarded_port"</span>, guest: <span class="number">11001</span>, host: <span class="number">11001</span></div></pre></td></tr></table></figure>
<p>控制台执行如下命令重启虚拟机：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>vagrant reload</div></pre></td></tr></table></figure>
<h4 id="虚拟机映射到路由"><a href="#虚拟机映射到路由" class="headerlink" title="虚拟机映射到路由"></a>虚拟机映射到路由</h4><p>虚拟机映射到路由需要使用 linux 下强大的工具 iptables，更加详细的了解可以移步<a href="http://www.adintr.com/article/266" target="_blank" rel="external">iptables原理及应用详解</a>，这里只讲用 nat 表进行端口映射的功能。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>一般centos系统已经默认安装了iptables，如果没有安装则命令行执行如下安装命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum <span class="keyword">install</span> -y iptables</div></pre></td></tr></table></figure>
<p>设置 iptables 服务开机启动(如果已经能开机启动，略过该步骤)：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig iptables <span class="keyword">on</span></div></pre></td></tr></table></figure>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>打开服务(如果配置文件为空，打开会有警告，配置过规则以后即可正常启动)：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service iptables <span class="literal">start</span></div></pre></td></tr></table></figure>
<p>关闭服务：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service iptables <span class="built_in">stop</span></div></pre></td></tr></table></figure>
<p>查看目前生效的规则：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo service iptables status</div></pre></td></tr></table></figure>
<p>重启服务：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo service iptables restart</div></pre></td></tr></table></figure>
<h5 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h5><p>首先清除目前已有的规则：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo iptables -F</div><div class="line"><span class="variable">$ </span>sudo iptables -X</div><div class="line"><span class="variable">$ </span>sudo iptables -Z</div></pre></td></tr></table></figure>
<p>添加规则，修改目的端口为 11001（通过宿主机和虚拟机端口映射能被外网访问的端口） 的 INPUT 包，目的地址修改为 192.168.7.1（路由局域网地址），目的端口修改为 80（路由的http服务器端口）。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">iptables</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">nat</span> <span class="literal">-</span><span class="comment">A</span> <span class="comment">PREROUTING</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">tcp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dport</span> <span class="comment">11001</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">DNAT</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">to</span><span class="literal">-</span><span class="comment">destination</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">1:80</span></div></pre></td></tr></table></figure>
<p>添加规则，修改目的地址为192.168.7.1（路由局域网地址） 目的端口为 80（路由的http服务器端口） 的 OUTPUT 包，源的地址修改为 192.168.7.200（虚拟机的局域网地址）。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -t nat -A POSTROUTING -d <span class="number">192.168</span><span class="number">.7</span><span class="number">.1</span> -p tcp --dport <span class="number">80</span> -j SNAT --to <span class="number">192.168</span><span class="number">.7</span><span class="number">.200</span></div></pre></td></tr></table></figure>
<p>执行如下命令保存规则：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo service iptables save</div></pre></td></tr></table></figure>
<p>如果配置成功生效，外网访问宿主机的 11001 端口就相当于访问了局域网内路由器的 80 端口，即路由器的http服务。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vagrant </tag>
            
            <tag> nfs </tag>
            
            <tag> fis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS的类和继承的实现方法比较]]></title>
      <url>https://corey600.github.io/2015/07/07/js-class-inheritance/</url>
      <content type="html"><![CDATA[<h4 id="1-创建对象的各种方式对比"><a href="#1-创建对象的各种方式对比" class="headerlink" title="1.创建对象的各种方式对比"></a>1.创建对象的各种方式对比</h4><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"工厂模式"</span>);</div><div class="line">    <span class="comment">// 工厂模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">        o.name = name;</div><div class="line">        o.age = age;</div><div class="line">        o.job = job;</div><div class="line">        o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person1 = createPerson(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person1.sayName();</div><div class="line">    <span class="keyword">var</span> person2 = createPerson(<span class="string">"name2"</span>, <span class="number">30</span>, <span class="string">"job2"</span>);</div><div class="line">    person2.sayName();</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：能创建相似对象。</div><div class="line">     * 缺点：不能识别对象。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"构造函数模式"</span>);</div><div class="line">    <span class="comment">// 构造函数模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person1.sayName();</div><div class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"name2"</span>, <span class="number">30</span>, <span class="string">"job2"</span>);</div><div class="line">    person2.sayName();</div><div class="line"> </div><div class="line">    <span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">// true</span></div><div class="line"> </div><div class="line">    <span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：创建自定义的构造函数意味着可以将它的实例标识为一种特定的类型。</div><div class="line">     * 缺点：每个方法都要在每个实例上重新创建一遍。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="另一种函数构造模式"><a href="#另一种函数构造模式" class="headerlink" title="另一种函数构造模式"></a>另一种函数构造模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"另一种函数构造模式"</span>);</div><div class="line">    <span class="comment">// 另一种函数构造模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.sayName = sayName;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person1.sayName();</div><div class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"name2"</span>, <span class="number">30</span>, <span class="string">"job2"</span>);</div><div class="line">    person2.sayName();</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：不同对象能够共享在全局作用域中定义的同一个函数。</div><div class="line">     * 缺点：</div><div class="line">     * (1) 在全局作用域中定义的函数实际上只能被某个对象调用，这让全局作用域名不副实。</div><div class="line">     * (2) 如果对象定义很多方法，那么就要定义很多个全局函数，于是自定义的引用类型就失去了封</div><div class="line">     * 装性。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    console.info(<span class="string">"原型模式"</span>)<span class="comment">;</span></div><div class="line">    // 原型模式</div><div class="line"> </div><div class="line">    function Person()&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    Person.prototype.name = <span class="string">"name1"</span><span class="comment">;</span></div><div class="line">    Person.prototype.age = <span class="number">29</span><span class="comment">;</span></div><div class="line">    Person.prototype.job = <span class="string">"job1"</span><span class="comment">;</span></div><div class="line">    Person.prototype.friends = [<span class="string">"f1"</span>, <span class="string">"f2"</span>]<span class="comment">;</span></div><div class="line">    Person.prototype.sayName = function()&#123;</div><div class="line">        console.log(<span class="name">this.name</span>)<span class="comment">;</span></div><div class="line">    &#125;<span class="comment">;</span></div><div class="line"> </div><div class="line">    var person1 = new Person()<span class="comment">;</span></div><div class="line">    person1.sayName()<span class="comment">; // name1</span></div><div class="line">    var person2 = new Person()<span class="comment">;</span></div><div class="line">    person2.sayName()<span class="comment">; // name1</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">person1.sayName</span> == person2.sayName)<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    // 确定是否是原型中的属性</div><div class="line">    function isPrototypeProperty(<span class="name">object</span>, name)&#123;</div><div class="line">        return (<span class="name">!object.hasOwnProperty</span>(<span class="name"><span class="builtin-name">name</span></span>)) &amp;&amp; (<span class="name"><span class="builtin-name">name</span></span> in object)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    console.log(<span class="name">isPrototypeProperty</span>(<span class="name">person1</span>, <span class="string">"name"</span>))<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    person1.name = <span class="string">"name2"</span><span class="comment">;</span></div><div class="line">    console.log(<span class="name">person1.name</span>)<span class="comment">; // name2 —— 来自实例</span></div><div class="line">    console.log(<span class="name">person2.name</span>)<span class="comment">; // name1 —— 来自原型</span></div><div class="line">    console.log(<span class="name">isPrototypeProperty</span>(<span class="name">person1</span>, <span class="string">"name"</span>))<span class="comment">; // false</span></div><div class="line"> </div><div class="line">    delete person1.name;</div><div class="line">    console.log(<span class="name">person1.name</span>)<span class="comment">; // name1 —— 来自原型</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">person1.friends</span>)<span class="comment">; // ["f1", "f2"]</span></div><div class="line">    console.log(<span class="name">person2.friends</span>)<span class="comment">; // ["f1", "f2"]</span></div><div class="line">    person1.friends.push(<span class="string">"f3"</span>)<span class="comment">;</span></div><div class="line">    console.log(<span class="name">person1.friends</span>)<span class="comment">; // ["f1", "f2", "f3"]</span></div><div class="line">    console.log(<span class="name">person2.friends</span>)<span class="comment">; // ["f1", "f2", "f3"]</span></div><div class="line">    console.log(<span class="name">person1.friends</span> == person2.friends)<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 优点：所有对象实例能够共享原型的属性和方法。</div><div class="line">     * 缺点：</div><div class="line">     * (<span class="number">1</span>) 不能通过对象实例重写原型中的值，如果在实例中添加一个同名属性，就是在实例中创建了</div><div class="line">     * 该属性，屏蔽了原型中的那个属性。删除该同名属性可以恢复对原型中属性的链接。</div><div class="line">     * (<span class="number">2</span>) 所有实例在默认情况下都将取得相同的属性值。</div><div class="line">     * (<span class="number">3</span>) 原型中的所有属性都是被实例共享的。这个问题对于包含引用类型值的属性来说比较突出。</div><div class="line">     */</div><div class="line">&#125;())<span class="comment">;</span></div></pre></td></tr></table></figure>
<h5 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h5><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    console.info(<span class="string">"更简单的原型语法"</span>)<span class="comment">;</span></div><div class="line">    // 更简单的原型语法</div><div class="line"> </div><div class="line">    function Person()&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    var prePerson = new Person()<span class="comment">;</span></div><div class="line"> </div><div class="line">    // 重写原型对象</div><div class="line">    Person.prototype = &#123;</div><div class="line">        name : <span class="string">"name1"</span>,</div><div class="line">        age : <span class="number">29</span>,</div><div class="line">        job : <span class="string">"job1"</span>,</div><div class="line">        sayName : function()&#123;</div><div class="line">            console.log(<span class="name">this.name</span>)<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">    &#125;<span class="comment">;</span></div><div class="line"> </div><div class="line">    // prePerson.sayName()<span class="comment">; // 出错</span></div><div class="line"> </div><div class="line">    var person = new Person()<span class="comment">;</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">person</span> instanceof Object)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">person</span> instanceof Person)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">person.constructor</span> == Object)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">person.constructor</span> == Person)<span class="comment">; // false</span></div><div class="line"> </div><div class="line">    // 重新设置constructor的值</div><div class="line">    Person.prototype.constructor = Person;</div><div class="line">    console.log(<span class="name">person.constructor</span> == Person)<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    // 以下代码只适用于ECMAScript5 兼容的浏览器</div><div class="line">    console.log(<span class="name">Object.keys</span>(<span class="name">Person.prototype</span>))<span class="comment">; // ["name", "age", "job", "sayName", "constructor"]</span></div><div class="line">    Object.defineProperty(<span class="name">Person.prototype</span>, <span class="string">"constructor"</span>, &#123;</div><div class="line">        enumerable : <span class="literal">false</span>,</div><div class="line">        value : Person</div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">    console.log(<span class="name">Object.keys</span>(<span class="name">Person.prototype</span>))<span class="comment">; // ["name", "age", "job", "sayName"]</span></div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 优点：相比于之前的原型语法，减少了不必要的输入，从视觉上更好地封装了原型的功能。</div><div class="line">     * 缺点：</div><div class="line">     * (<span class="number">1</span>) 具有之前的原型模式的全部三个缺点。</div><div class="line">     * (<span class="number">2</span>) 本质上重写了默认的prototype对象，因此constructor属性也变成了新的对象的</div><div class="line">     * constructor属性(指向Object构造函数)， 不再指向Person函数。当然也可以重新设置</div><div class="line">     * constructor值，但是这样会导致它的[[Enumerable]]特性被设置为<span class="literal">true</span>，单是原生的</div><div class="line">     * constructor属性是不可枚举的。此时就需要使用ECMAScript5的特性来重设。</div><div class="line">     * (<span class="number">3</span>) 重写原型对象切断了现有原型和任何之前已经存在的对象实例之间的联系，在重写原型</div><div class="line">     * 之前创建的对象实例引用的仍然是最初的原型（原型的动态性）。</div><div class="line">     */</div><div class="line">&#125;())<span class="comment">;</span></div></pre></td></tr></table></figure>
<h5 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"组合使用构造函数和原型模式"</span>);</div><div class="line">    <span class="comment">// 组合使用构造函数和原型模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.friends = [<span class="string">"f1"</span>, <span class="string">"f2"</span>];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    Person.prototype = &#123;</div><div class="line">        <span class="attr">constructor</span> : Person,</div><div class="line">        <span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person1.sayName();</div><div class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"name2"</span>, <span class="number">30</span>, <span class="string">"job2"</span>);</div><div class="line">    person2.sayName();</div><div class="line"> </div><div class="line">    <span class="built_in">console</span>.log(person1.friends); <span class="comment">// ["f1", "f2"]</span></div><div class="line">    <span class="built_in">console</span>.log(person2.friends); <span class="comment">// ["f1", "f2"]</span></div><div class="line">    person1.friends.push(<span class="string">"f3"</span>);</div><div class="line">    <span class="built_in">console</span>.log(person1.friends); <span class="comment">// ["f1", "f2", "f3"]</span></div><div class="line">    <span class="built_in">console</span>.log(person2.friends); <span class="comment">// ["f1", "f2"]</span></div><div class="line">    <span class="built_in">console</span>.log(person1.friends == person2.friends); <span class="comment">// false</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：实例属性在构造函数中定义，所有实例共享的属性和方法在原型中定义。</div><div class="line">     * 缺点：独立的构造函数和原型使人困惑。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="动态原型模式-（推荐方式）"><a href="#动态原型模式-（推荐方式）" class="headerlink" title="动态原型模式 （推荐方式）"></a>动态原型模式 （推荐方式）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"动态原型模式"</span>);</div><div class="line">    <span class="comment">// 动态原型模式 （推荐方式）</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line"> </div><div class="line">        <span class="comment">// 属性</span></div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line"> </div><div class="line">        <span class="comment">// 方法</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>)&#123;</div><div class="line">            <span class="comment">// 不能使用字面量重写原型，否则会切断现有实例与新原型之间的联系</span></div><div class="line">            Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person.sayName();</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：</div><div class="line">     * (1) 把所有信息都封装在了构造函数中.</div><div class="line">     * (2) 只在有必要时初始化原型。</div><div class="line">     * (3) 对原型所做的修改能够立即在所有实例中得到反映。</div><div class="line">     * (4) 实例属性在构造函数中定义，所有实例共享的属性和方法在原型中定义。</div><div class="line">     * 缺点：不能使用字面量重写原型。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"寄生构造函数模式"</span>);</div><div class="line">    <span class="comment">// 寄生构造函数模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyArray</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 创建数组</span></div><div class="line">        <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"> </div><div class="line">        <span class="comment">// 添加值</span></div><div class="line">        values.push.apply(values,  <span class="built_in">arguments</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// 添加方法</span></div><div class="line">        values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">        <span class="comment">// 返回数组</span></div><div class="line">        <span class="keyword">return</span> values;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> MyArray(<span class="string">"col1"</span>, <span class="string">"col2"</span>, <span class="string">"col3"</span>);</div><div class="line">    <span class="built_in">console</span>.log(colors.toPipedString());</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 说明：《javascript高级程序设计第三版》 p160</div><div class="line">     * &gt;除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实已一模一</div><div class="line">     * 样的。构造函数在不返回值的情况下，默认返回新的对象实例。而通过在构造函数的末尾添加</div><div class="line">     * 一个return语句，重写了调用构造函数时的返回值。</div><div class="line">     */</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：能在不修改原生类型的情况下，创建具有额外方法的扩展原生类型的对象。</div><div class="line">     * 缺点：返回的对象与构造函数或者与构造函数的原型属性之间没有关系，不能依赖instanceof</div><div class="line">     * 操作符来确定对象类型。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"稳妥构造函数模式"</span>);</div><div class="line">    <span class="comment">// 稳妥构造函数模式</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">        <span class="comment">// 创建要返回的对象</span></div><div class="line">        <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"> </div><div class="line">        <span class="comment">// 可以在这里定义私有变量和函数</span></div><div class="line"> </div><div class="line">        <span class="comment">// 添加方法</span></div><div class="line">        o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(name);</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">        <span class="comment">// 返回对象</span></div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> person = Person(<span class="string">"name1"</span>, <span class="number">29</span>, <span class="string">"job1"</span>);</div><div class="line">    person.sayName();</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 说明：《javascript高级程序设计第三版》 p161</div><div class="line">     * &gt;所谓的稳妥对象，指的是没有公共属性，而且其方法也不引用this的对象。稳妥对象最适合在</div><div class="line">     * 一些安全的环境中(这些环境中会禁用this和new)，或者在防止数据被其他应用程序(如Mashup</div><div class="line">     * 程序)改动时使用。稳妥构造函数遵循与寄生构造函数类似的模式，但有两点不同：一是新创建</div><div class="line">     * 对象的实例方法不引用this；二是不使用new操作符调用构造函数。</div><div class="line">     */</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：除了调用方法外，没有别的方式可以访问其数据成员。</div><div class="line">     * 缺点：返回的对象与构造函数或者与构造函数的原型属性之间没有关系，不能依赖instanceof</div><div class="line">     * 操作符来确定对象类型。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h4 id="2-实现继承的各种方式对比"><a href="#2-实现继承的各种方式对比" class="headerlink" title="2. 实现继承的各种方式对比"></a>2. 实现继承的各种方式对比</h4><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"原型链"</span>);</div><div class="line">    <span class="comment">// 原型链</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.colors = [<span class="string">"col1"</span>, <span class="string">"col2"</span>];</div><div class="line">    &#125;</div><div class="line">    SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.subproperty = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">    SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">    <span class="built_in">console</span>.log(instance1.getSuperValue());</div><div class="line"> </div><div class="line">    <span class="built_in">console</span>.log(instance1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(instance1 <span class="keyword">instanceof</span> SuperType); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(instance1 <span class="keyword">instanceof</span> SubType); <span class="comment">// true</span></div><div class="line"> </div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance1)); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance1)); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(SubType.prototype.isPrototypeOf(instance1)); <span class="comment">// true</span></div><div class="line"> </div><div class="line">    <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">    instance1.colors.push(<span class="string">"col3"</span>);</div><div class="line">    <span class="built_in">console</span>.log(instance1.colors); <span class="comment">// ["col1", "col2", "col3"]</span></div><div class="line">    <span class="built_in">console</span>.log(instance2.colors); <span class="comment">// ["col1", "col2", "col3"]</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：使用instanceof操作符来测试实例与原型链中出现的构造函数，都返回true。同样，只</div><div class="line">     * 要是原型链中出现过的原型，都可以说是该原型链所派生的实例的原型，因此isPrototypeOf()</div><div class="line">     * 方法也会返回true.</div><div class="line">     * 缺点：</div><div class="line">     * (1) 不能使用对象字面量创建原型方法，因为这样会重写原型链。</div><div class="line">     * (2) 子类的原型实际上是超类的实例，超类中包含引用类型值的原型属性会被所有实例共享。</div><div class="line">     * (3) 不能在不影响所有实例的情况下给超类的构造函数传递参数。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"借用构造函数"</span>);</div><div class="line">    <span class="comment">// 借用构造函数</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 继承了 SuperType，同时还传递了参数</span></div><div class="line">        SuperType.call(<span class="keyword">this</span>, <span class="string">"name1"</span>);</div><div class="line"> </div><div class="line">        <span class="comment">// 实例属性</span></div><div class="line">        <span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">    <span class="built_in">console</span>.log(instance.name);</div><div class="line">    <span class="built_in">console</span>.log(instance.age);</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：可以在子类型构造函数中向超类型构造函数传递参数。</div><div class="line">     * 缺点：方法只能在构造函数中定义，在超类原型中定义的方法对于子类型是不可见的。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="组合继承-（最常用）"><a href="#组合继承-（最常用）" class="headerlink" title="组合继承 （最常用）"></a>组合继承 （最常用）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"组合继承"</span>);</div><div class="line">    <span class="comment">// 组合继承 （最常用）</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.colors = [<span class="string">"col1"</span>, <span class="string">"col2"</span>];</div><div class="line">    &#125;</div><div class="line">    SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line"> </div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">        <span class="comment">// 继承属性</span></div><div class="line">        SuperType.call(<span class="keyword">this</span>, name);</div><div class="line"> </div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 继承方法</span></div><div class="line">    SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"> </div><div class="line">    SubType.prototype.constructor = SubType;</div><div class="line">    SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"name1"</span>, <span class="number">29</span>);</div><div class="line">    instance1.colors.push(<span class="string">"col3"</span>);</div><div class="line">    <span class="built_in">console</span>.log(instance1.colors); <span class="comment">// ["col1", "col2", "col3"]</span></div><div class="line">    instance1.sayName(); <span class="comment">// name1</span></div><div class="line">    instance1.sayAge(); <span class="comment">// 29</span></div><div class="line"> </div><div class="line">    <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"name2"</span>, <span class="number">27</span>);</div><div class="line">    <span class="built_in">console</span>.log(instance2.colors); <span class="comment">// ["col1", "col2"]</span></div><div class="line">    instance2.sayName(); <span class="comment">// name2</span></div><div class="line">    instance2.sayAge(); <span class="comment">// 27</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 优点：</div><div class="line">     * (1) 使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。</div><div class="line">     * 这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</div><div class="line">     * (2) instanceof 和 isPrototypeOf() 也能够用于识别基于组合继承创建的对象。</div><div class="line">     * 缺点：无论在什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</div><div class="line">     * 子类型最终会包含超类型对象的全部实例属性，但不得不在调用子类型构造函数时重写这些属性。</div><div class="line">     */</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h5 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h5><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    console.info(<span class="string">"寄生组合式继承"</span>)<span class="comment">;</span></div><div class="line">    // 寄生组合式继承</div><div class="line"> </div><div class="line">    function object(<span class="name">o</span>)&#123;</div><div class="line">        function F()&#123;&#125;</div><div class="line">        F.prototype = o;</div><div class="line">        return new F()<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function inheritPrototype(<span class="name">subType</span>, superType)&#123;</div><div class="line">        var prototype = Object(<span class="name">superType.prototype</span>)<span class="comment">; // 创建对象,和var prototype = superType.prototype;等效？</span></div><div class="line">        prototype.constructor = subType; // 增强对象 bug: 这里实际上是把superType.prototype.constructor改成了subType</div><div class="line">        subType.prototype = prototype; // 指定对象</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function SuperType(<span class="name"><span class="builtin-name">name</span></span>)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>]<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    SuperType.prototype.sayName = function()&#123;</div><div class="line">        alert(<span class="name">this.name</span>)<span class="comment">;</span></div><div class="line">    &#125;<span class="comment">;</span></div><div class="line"> </div><div class="line">    var instance1 = new SuperType()<span class="comment">;</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">instance1</span> instanceof Object)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">instance1</span> instanceof SuperType)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">instance1</span> instanceof SubType)<span class="comment">; // false</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">Object.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">SuperType.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">SubType.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // false</span></div><div class="line"> </div><div class="line">    function SubType(<span class="name"><span class="builtin-name">name</span></span>, age)&#123;</div><div class="line">        SuperType.call(<span class="name">this</span>, name)<span class="comment">;</span></div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    inheritPrototype(<span class="name">SubType</span>, SuperType)<span class="comment">;</span></div><div class="line">    SubType.prototype.sayAge = function()&#123;</div><div class="line">        alert(<span class="name">this.age</span>)<span class="comment">;</span></div><div class="line">    &#125;<span class="comment">;</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">instance1</span> instanceof Object)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">instance1</span> instanceof SuperType)<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">instance1</span> instanceof SubType)<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    console.log(<span class="name">Object.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">SuperType.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // true</span></div><div class="line">    console.log(<span class="name">SubType.prototype.isPrototypeOf</span>(<span class="name">instance1</span>))<span class="comment">; // true</span></div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 优点：只调用了一次SuperType构造函数，并且因此避免了在SubType.prototype上创建不必要的、多余的属性。</div><div class="line">     * 缺点：事实上在调用inheritPrototype方法时，会把superType.prototype.constructor改成subType，</div><div class="line">     * 使得对一个超类的实例使用instanceof和SubType.prototype.isPrototypeOf的结果在调用inheritPrototype前后会发生变化。</div><div class="line">     * 为了避免这个问题可以使用：</div><div class="line">     * function object(<span class="name">o</span>)&#123;</div><div class="line">         *     function F()&#123;&#125;</div><div class="line">         *     F.prototype = o;</div><div class="line">         *     return new F()<span class="comment">;</span></div><div class="line">         * &#125;</div><div class="line">     * 即object(<span class="name">superType.prototype</span>)来代替上文的Object(<span class="name">superType.prototype</span>)。</div><div class="line">     * 或者直接使用Object.create(<span class="name">superType.prototype</span>)，即创建一个原型为等于superType.prototype的实例，</div><div class="line">     * 但值得注意的是Object.create只有IE <span class="number">9</span>+ Firefox <span class="number">4</span>+ Safari <span class="number">5</span>+ Opera <span class="number">12</span>+ 和 Chrome才支持。</div><div class="line">     */</div><div class="line">&#125;())<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 类 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fiddler使用说明]]></title>
      <url>https://corey600.github.io/2015/06/16/fiddler-instructions/</url>
      <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>Fiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。</p>
</blockquote>
<h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p><a href="http://www.telerik.com/download/fiddler" target="_blank" rel="external">下载地址</a> <a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/InstallFiddler" target="_blank" rel="external">安装过程</a></p>
<h3 id="基本界面"><a href="#基本界面" class="headerlink" title="基本界面"></a>基本界面</h3><p><img src="/images/20150616/f1.jpg" alt="基本界面"></p>
<ul>
<li>监听开关：开启或者关闭。<code>capturing</code>表示开启状态。</li>
<li>监听类型：有 监听所有进程请求(All processes)、监听浏览器请求(Web browsers)、监听非浏览器请求(Non-Browser)和隐藏所有(Hide All)</li>
<li>请求列表：请求列表的信息分别有 结果(Result)，协议(Protocol)，主机名(Host)，网页地址(URL)，内容大小(Body)，缓存(Caching)，响应的HTTP内容类型(Content-Type)，请求所运行的程序(Process)，注释(Comments)，自定义(Custom)</li>
<li>功能区：包括各种数据流查看器、日志、重定向、请求构造、过滤器、时间轴、统计图表、脚本。</li>
</ul>
<a id="more"></a>
<h6 id="以下只讲具体功能操作，其他细节请参阅官方文档和使用搜索"><a href="#以下只讲具体功能操作，其他细节请参阅官方文档和使用搜索" class="headerlink" title="以下只讲具体功能操作，其他细节请参阅官方文档和使用搜索"></a>以下只讲具体功能操作，其他细节请<a href="http://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler" target="_blank" rel="external">参阅官方文档</a>和<a href="http://www.bing.com/explore/" target="_blank" rel="external">使用搜索</a></h6><h3 id="抓取并解密HTTPS请求"><a href="#抓取并解密HTTPS请求" class="headerlink" title="抓取并解密HTTPS请求"></a>抓取并解密HTTPS请求</h3><p>Fiddler是可以抓取HTTPS的请求，并解密的。但是浏览器会检查数字证书，经过Fiddler解密的请求会被浏览器认为是遭到窃听的。为此，Fiddler通过一个自己的数字证书重新加密HTTPS请求。设置Fiddler为抓取并解密HTTPS请求时，会自动生成一个名为<code>DO_NOT_TRUST_FiddlerRoot</code>的CA证书，并能通过该CA证书生成各个域名的TLS证书。只要将<code>DO_NOT_TRUST_FiddlerRoot</code>证书设置为浏览器或其他软件的信任CA证书，浏览器就会认为被Fiddler重新加密的HTTPS请求是可信的，不会再提示“证书错误警告”。</p>
<p>设置Fiddler抓取和解密HTTPS请求的方法：</p>
<h4 id="1-开启HTTPS抓取"><a href="#1-开启HTTPS抓取" class="headerlink" title="1.开启HTTPS抓取"></a>1.开启HTTPS抓取</h4><p>打开Fiddler选项窗口：<code>Tools &gt; Fiddler Options &gt; HTTPS</code><br>选择HTTPS标签页，选中<code>Capture HTTPS CONNECTs</code> 和 <code>Decrypt HTTPS traffic</code> 两个复选框。</p>
<p><img src="/images/20150616/f2.png" alt="基本界面"></p>
<h4 id="2-设置CA证书"><a href="#2-设置CA证书" class="headerlink" title="2. 设置CA证书"></a>2. 设置CA证书</h4><p>在开启HTTPS抓取时Fiddler会弹框提示将证书加入浏览器的信任列表，如果只是用于抓取和解密浏览器的HTTPS请求，只要更具提示点击就可以了。但是如果需要抓取和解密其他应用的HTTPS请求，则需要将证书导入系统的信任列表。</p>
<p>点击上图中的<code>Export Root Certificate to Desktop</code>按钮，会在桌面生成一个名为<code>FiddlerRoot.cer</code>的证书文件：</p>
<p><img src="/images/20150616/f3.bmp" alt="基本界面"></p>
<p>然后win键+R打开运行窗口输入mmc打开如下窗口：</p>
<p><img src="/images/20150616/f4.png" alt="基本界面"></p>
<p>选择添加/删除管理单元，选择证书添加到右侧并确定。</p>
<p><img src="/images/20150616/f5.png" alt="基本界面"></p>
<p>右击<code>受信任的根证书颁发机构 &gt; 证书</code> 导入，在弹出框内选择上文生成的桌面上名为 <code>FiddlerRoot.cer</code> 的证书文件，然后确定。</p>
<p><img src="/images/20150616/f6.png" alt="基本界面"></p>
<p>下一步至完成，在如下图列表中找到颁发给<code>DO_NOT_TRUST_FiddlerRoot</code>的项时表示导入成功。</p>
<p><img src="/images/20150616/f7.png" alt="基本界面"></p>
<p>手动导入证书到其他浏览器的过程类似：</p>
<ul>
<li>IE:  Internet选项 &gt; 内容 &gt; 证书 &gt; 导入</li>
<li>chrome:  设置 &gt; 显示高级设置 &gt; HTTPS/SSL &gt; 管理证书 &gt; 导入</li>
<li>firefox:  选项 &gt; 高级 &gt; 证书 &gt; 查看证书 &gt; 导入</li>
</ul>
<h4 id="3-开始监听HTTPS"><a href="#3-开始监听HTTPS" class="headerlink" title="3. 开始监听HTTPS"></a>3. 开始监听HTTPS</h4><p>设置完成之后重启Fiddler开始监听请求，HTTPS请求就能出现在请求列表中了。但是，直接点击HTTPS请求在查看器中body的内容可能是乱码，点击黄色的提示文字就能正常显示了。</p>
<p><img src="/images/20150616/f8.png" alt="基本界面"></p>
<h4 id="4-添加例外"><a href="#4-添加例外" class="headerlink" title="4. 添加例外"></a>4. 添加例外</h4><p>如下图有按类型删选和按主机名添加例外两种方式。</p>
<p><img src="/images/20150616/f9.png" alt="基本界面"></p>
<h4 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h4><p><a href="http://wangsheng14591.blog.163.com/blog/static/3277971020130465730354/" target="_blank" rel="external">如何配置能让fiddler抓去https的请求？</a><br><a href="http://yoursunny.com/t/2011/FiddlerHTTPS/" target="_blank" rel="external">在服务器上用Fiddler抓取HTTPS流量</a><br><a href="http://www.cnblogs.com/yelaiju/archive/2011/09/12/2173893.html" target="_blank" rel="external">fiddler https</a></p>
<h3 id="重定向线上JS脚本"><a href="#重定向线上JS脚本" class="headerlink" title="重定向线上JS脚本"></a>重定向线上JS脚本</h3><h4 id="1-找到调试需要修改的文件"><a href="#1-找到调试需要修改的文件" class="headerlink" title="1. 找到调试需要修改的文件"></a>1. 找到调试需要修改的文件</h4><p>先要在请求列表中找到需要修改和调试的JS源文件的对应请求。建议始终关闭缓存，以便修改能及时更新，然后使用过滤器过滤需要的请求。</p>
<ul>
<li>始终关闭缓存</li>
</ul>
<p>暂时关闭缓存可以在菜单栏中设置： <code>Rules &gt; Performance &gt; Disable Caching</code><br>需要保存设置在下次开启时有效可以设置Fiddler脚本，打开功能区的FiddlerScript标签，搜索关键字<code>m_DisableCaching</code>，上下文代码如下：</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Cause Fiddler to delay HTTP traffic to simulate typical 56k modem conditions</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> RulesOption(<span class="string">"Simulate &amp;Modem Speeds"</span>, <span class="string">"Per&amp;formance"</span>)</div><div class="line"><span class="keyword">var</span> m_SimulateModem: <span class="keyword">boolean</span> = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line"><span class="comment">// Removes HTTP-caching related headers and specifies "no-cache" on requests and responses</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> RulesOption(<span class="string">"&amp;Disable Caching"</span>, <span class="string">"Per&amp;formance"</span>)</div><div class="line"><span class="keyword">var</span> m_DisableCaching: <span class="keyword">boolean</span> = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> RulesOption(<span class="string">"Cache Always &amp;Fresh"</span>, <span class="string">"Per&amp;formance"</span>)</div><div class="line"><span class="keyword">var</span> m_AlwaysFresh: <span class="keyword">boolean</span> = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line"><span class="comment">// Force a manual reload of the script file.  Resets all</span></div><div class="line"><span class="comment">// RulesOption variables to their defaults.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ToolsAction(<span class="string">"Reset Script"</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoManualReload</span><span class="params">()</span> </span>&#123;</div><div class="line">    FiddlerObject.ReloadScript();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将<code>var m_DisableCaching: boolean = false;</code>中的值<code>false</code>修改为<code>true</code>，然后点击左上角的<code>Save Script</code>按钮保存即可。</p>
<ul>
<li>使用过滤器筛选文件</li>
</ul>
<p>过滤器是左侧功能区的Filter标签页，选中<code>Use Filters</code>复选框。这里使用URL删选出包含<code>.js</code>后缀的文件，按照如下图设置：</p>
<p><img src="/images/20150616/f10.png" alt="基本界面"></p>
<p>开启筛选后仅对之后的请求有效，要想筛选已经记录的请求，单击右上角<code>Actions</code>按钮选择<code>Run Filterset now</code>。</p>
<h4 id="2-下载调试文件"><a href="#2-下载调试文件" class="headerlink" title="2. 下载调试文件"></a>2. 下载调试文件</h4><p>找到需要调试的文件对应的请求后，右击该请求项，选择<code>Svae &gt; Response &gt; Response Body...</code>，将文件保存到桌面。</p>
<p><img src="/images/20150616/f11.png" alt="基本界面"></p>
<h4 id="3-重定向请求到本地文件"><a href="#3-重定向请求到本地文件" class="headerlink" title="3. 重定向请求到本地文件"></a>3. 重定向请求到本地文件</h4><p>将上文保存的文件的对应请求直接拖到<code>AutoResponder</code>标签页，在下面的<code>RuleEditor</code>的第二个编辑框内下拉选择<code>Find a file...</code>，定位到上文保存到桌面的文件，点击<code>Save</code>按钮。<br>然后选中左上角的<code>Enable automatic responses</code>和<code>Unmatched requests passthrough</code>两个复选框。前者是开启重定向，后者是允许不匹配的请求直接放行。</p>
<p><img src="/images/20150616/f12.png" alt="基本界面"></p>
<h4 id="4-修改和运行修改的文件"><a href="#4-修改和运行修改的文件" class="headerlink" title="4. 修改和运行修改的文件"></a>4. 修改和运行修改的文件</h4><p>打开请求重定向的那个本地文件，做一下修改，比如我将百度首页的一个js脚本全部清空，并加入自己的代码 ：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'假装是谷歌'</span>;</div><div class="line"><span class="built_in">window</span>.<span class="built_in">document</span>.title = name;</div></pre></td></tr></table></figure>
<p>刷新百度主页，发现原先请求的脚本变成了本地已经修改过的js脚本，并且运行成功。</p>
<p><img src="/images/20150616/f13.png" alt="基本界面"></p>
<h4 id="5-使用重定向伪造数据"><a href="#5-使用重定向伪造数据" class="headerlink" title="5. 使用重定向伪造数据"></a>5. 使用重定向伪造数据</h4><p>重定向功能即能定向脚本文件，其实能截获和修改任何http请求，包括Ajax请求的后台接口，可以将想要接口返回的json数据保存成一个文件，然后使用<code>Find  a file...</code>定位到该文件。</p>
<p>截获的http请求特征还可以使用正则表达式来匹配。以<code>regex:</code>是使用正则表达式匹配，<code>method</code>删选特定的请求方法等等。具体使用可以参考下拉显示的例子。右侧蓝色<code>Test..</code>点开可以测试正则表达式。</p>
<p><img src="/images/20150616/f14.png" alt="基本界面"></p>
<h4 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h4><p><a href="http://www.cnblogs.com/RockLi/p/3511132.html" target="_blank" rel="external">如何使用Fiddler调试线上JS代码</a><br><a href="http://www.cnblogs.com/Darren_code/archive/2011/09/28/Fiddler.html" target="_blank" rel="external">Fiddler - 前端开发值得拥有</a><br><a href="http://www.2cto.com/kf/201308/234828.html" target="_blank" rel="external">使用Fiddler提高前端工作效率 (实例篇)</a></p>
<h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>除了上文这种最常用的功能，Fiddler还有其他很多功能，比如：</p>
<p>查看器、过滤器、请求构造、搜索数据流、比较数据流、作为远程终端的代理服务器并抓包、文本编码和解码、SAZ数据流录制、使用FiddlerScript脚本……</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.open-open.com/doc/view/07de1e1bb7874585a35a6fa7339dd890" target="_blank" rel="external">使用Fiddler提高前端工作效率.pdf</a><br><a href="http://caibaojian.com/fiddler.html" target="_blank" rel="external">用Fiddler模拟低速网络环境</a><br><a href="http://www.aliued.cn/2010/04/25/use-fiddler-to-improve-efficiency-of-front-development-example.html" target="_blank" rel="external">使用Fiddler提高前端工作效率 (实例篇)</a><br><a href="http://kb.cnblogs.com/page/130367/" target="_blank" rel="external">Fiddler 教程</a><br><a href="http://web.jobbole.com/82710/" target="_blank" rel="external">Fiddler实战深入研究(二)</a><br><a href="http://blog.csdn.net/codenewbie/article/details/17162189" target="_blank" rel="external">Fiddler (五) Mac下使用Fiddler</a></p>
<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><h4 id="1-在用Fiddler调试本机的网站时，返回如下错误"><a href="#1-在用Fiddler调试本机的网站时，返回如下错误" class="headerlink" title="1. 在用Fiddler调试本机的网站时，返回如下错误:"></a>1. 在用Fiddler调试本机的网站时，返回如下错误:</h4><blockquote>
<p>[Fiddler] Connection to localhost. failed.Exception Text: No connection could be made because the target machine actively refused it</p>
</blockquote>
<p>解决方法：<br>打开Fiddler，菜单&gt;Fiddler Options&gt;General&gt;Enable IPv6(if avaible)去掉该选项。</p>
<p>参考链接：<br><a href="http://blog.chinaunix.net/uid-20675015-id-1899931.html" target="_blank" rel="external">Fiddler Connection to localhost. failed. </a><br><a href="http://weblogs.asp.net/mikebosch/archive/2007/10/09/using-fiddler-with-asp-net-s-default-local-server.aspx" target="_blank" rel="external">Using Fiddler with ASP.NET’s default local server</a></p>
<h4 id="2-怎样代理本地web服务器的访问请求"><a href="#2-怎样代理本地web服务器的访问请求" class="headerlink" title="2. 怎样代理本地web服务器的访问请求"></a>2. 怎样代理本地web服务器的访问请求</h4><p>Fiddler是捕捉不了本地http请求的。一般访问安装在本地的服务器程序时，会使用的localhost或127.0.0.1地址，但是这样默认会绕过代理，直接访问目标服务器。</p>
<p>解决方法：<br>使用Fiddler特有的请求方式，可以使本地请求及响应都被fiddler拦截。即在localhost后增加.fiddler或者仅增加一个点。比如把请求<code>http://localhost:8080</code>改为<code>http://localhost.:8080</code>或者<code>http://localhost.fiddler:8080</code>即可。</p>
<p>参考链接：<br><a href="http://www.2cto.com/kf/201308/234833.html" target="_blank" rel="external">Fiddler初次使用时应注意的几点</a></p>
<h4 id="3-将请求响应的body保存为文件时偶尔有乱码怎么办"><a href="#3-将请求响应的body保存为文件时偶尔有乱码怎么办" class="headerlink" title="3. 将请求响应的body保存为文件时偶尔有乱码怎么办"></a>3. 将请求响应的body保存为文件时偶尔有乱码怎么办</h4><p>解决方法：<br>win7：windows按钮+R，输入regedit。在注册表的<code>HKEY_CURRENT_USER\Software\Microsoft\Fiddler2</code>项上，右击新建，选字符串值，加上<code>HeaderEncoding</code>，然后值输入<code>GBK</code></p>
<p>参考链接：<br><a href="http://thinktothings.iteye.com/blog/1139336" target="_blank" rel="external">Fiddler2中文乱码问题</a></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Fiddler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[标准库函数mktime与夏令时]]></title>
      <url>https://corey600.github.io/2014/09/18/mktime-daylight/</url>
      <content type="html"><![CDATA[<h4 id="1-现象描述"><a href="#1-现象描述" class="headerlink" title="1.现象描述"></a>1.现象描述</h4><p>将本地系统时区设置为“(UTC)都柏林，爱丁堡，里斯本，伦敦”，并开启自动夏令时，将系统时间设置为处于当地的夏令时时间段内。代码中每次对时间进行转换，结果都会偏移一个小时。</p>
<h4 id="2-现象分析"><a href="#2-现象分析" class="headerlink" title="2.现象分析"></a>2.现象分析</h4><p>定位代码到C标准库time.h的函数mktime，struct tm结构的年月日的表示时间通过mktime转换为时间戳之后会偏移一个小时。原因是夏令时标志位tm_isdst没有设置，默认为0，表示不是夏令时。系统在调用mktime时会判断当前时区是否启用夏令时，如果启用夏令时，而传入的时间事实上处于夏令时，但是夏令时标志为0，系统就会加一个小时做默认的转换，并将夏令时标志置为1。</p>
<h4 id="3-解决问题"><a href="#3-解决问题" class="headerlink" title="3.解决问题"></a>3.解决问题</h4><a id="more"></a>
<p>首先明确什么是夏令时。维基百科的说明如下：</p>
<blockquote>
<p>夏时制或夏令时间（英语：Summer time），又称日光节约时制、日光节约时间（英语：Daylight saving time），是一种为节约能源而人为规定地方时间的制度，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮早的夏季人为将时间提前一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。各个采纳夏时制的国家具体规定不同。</p>
</blockquote>
<p>简单的说，某些国家会将一年中的某一段时间调快一个小时。那么在本机系统开启夏令时的情况下，调用mktime就有以下几种情况：</p>
<ol>
<li>传入的时间根据当地的夏令时规定正处于实行夏令时的时间段，且标志位为1，调用mktime不进行偏移。</li>
<li>传入的时间根据当地的夏令时规定正处于实行夏令时的时间段，但标志位为0，调用mktime加一个小时，并置标志位为1。</li>
<li>传入的时间根据当地的夏令时规定正处于实行夏令时的时间段，但标志位为-1，调用mktime不进行偏移，并置标志位为1。</li>
<li>传入的时间根据当地的夏令时规定不处于实行夏令时的时间段，但标志位为1，调用mktime减一个小时，并置标志位为0。</li>
<li>传入的时间根据当地的夏令时规定不处于实行夏令时的时间段，但标志位为0，调用mktime不进行偏移，并置标志位为0。</li>
<li>传入的时间根据当地的夏令时规定不处于实行夏令时的时间段，但标志位为-1，调用mktime不进行偏移，并置标志位为0。</li>
</ol>
<p>可以发现，如果置夏令时标志为-1，实质上是让系统自己判断传入的时间是否是夏令时。</p>
<p>代码示例</p>
<p>传入时间处于非夏令时时间段：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">struct tm stTime=<span class="string">&#123;0&#125;</span>;</div><div class="line">time_t tTime;</div><div class="line">stTime.tm_year = <span class="number">2014</span>;</div><div class="line">stTime.tm_mon = <span class="number">12</span>;</div><div class="line">stTime.tm_mday = <span class="number">26</span>;</div><div class="line">stTime.tm_hour = <span class="number">1</span>;</div><div class="line">stTime.tm_min = <span class="number">30</span>;</div><div class="line">stTime.tm_sec = <span class="number">12</span>;</div><div class="line">stTime.tm_mon -= <span class="number">1</span>;</div><div class="line">stTime.tm_year -= <span class="number">1900</span>;</div><div class="line"></div><div class="line">stTime.tm_isdst = -<span class="number">1</span>; <span class="regexp">//</span> 设置夏令时标志为-<span class="number">1</span>，表示该时间是否是夏令时未知</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">    </div><div class="line">stTime.tm_isdst = <span class="number">0</span>; <span class="regexp">//</span> 设置夏令时标志为<span class="number">0</span>，表示该时间不是夏令时</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">    </div><div class="line">stTime.tm_isdst = <span class="number">1</span>; <span class="regexp">//</span> 设置夏令时标志为<span class="number">1</span>，表示该时间是夏令时</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">-1</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20141226</span>T013012Z 夏令时标志：<span class="number">-1</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20141226</span>T013012Z 夏令时标志：<span class="number">0</span></div><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">0</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20141226</span>T013012Z 夏令时标志：<span class="number">0</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20141226</span>T013012Z 夏令时标志：<span class="number">0</span></div><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">1</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20141226</span>T013012Z 夏令时标志：<span class="number">1</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20141226</span>T003012Z 夏令时标志：<span class="number">0</span></div></pre></td></tr></table></figure>
<p>传入时间处于夏令时时间段：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">struct tm stTime=<span class="string">&#123;0&#125;</span>;</div><div class="line">time_t tTime;</div><div class="line">stTime.tm_year = <span class="number">2014</span>;</div><div class="line">stTime.tm_mon = <span class="number">8</span>;</div><div class="line">stTime.tm_mday = <span class="number">26</span>;</div><div class="line">stTime.tm_hour = <span class="number">1</span>;</div><div class="line">stTime.tm_min = <span class="number">30</span>;</div><div class="line">stTime.tm_sec = <span class="number">12</span>;</div><div class="line">stTime.tm_mon -= <span class="number">1</span>;</div><div class="line">stTime.tm_year -= <span class="number">1900</span>;</div><div class="line"></div><div class="line">stTime.tm_isdst = -<span class="number">1</span>; <span class="regexp">//</span> 设置夏令时标志为-<span class="number">1</span>，表示该时间是否是夏令时未知</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line"></div><div class="line">stTime.tm_isdst = <span class="number">1</span>; <span class="regexp">//</span> 设置夏令时标志为<span class="number">1</span>，表示该时间是夏令时</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line"></div><div class="line">stTime.tm_isdst = <span class="number">0</span>; <span class="regexp">//</span> 设置夏令时标志为<span class="number">0</span>，表示该时间不是夏令时</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n++++++++++[标记stTime.tm_isdst = %d]++++++++++\n\n"</span>, stTime.tm_isdst);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div><div class="line">tTime = mktime(&amp;stTime);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"\n运行tTime = mktime(&amp;stTime);语句之后\n\n"</span>);</div><div class="line"><span class="keyword">printf</span>(<span class="string">"stTime时间：%04d%02d%02dT%02d%02d%02dZ 夏令时标志：%d\n"</span>,</div><div class="line">    stTime.tm_year+<span class="number">1900</span>, stTime.tm_mon+<span class="number">1</span>, stTime.tm_mday,  stTime.tm_hour,  stTime.tm_min,  stTime.tm_sec, stTime.tm_isdst);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">-1</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20140826</span>T013012Z 夏令时标志：<span class="number">-1</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20140826</span>T013012Z 夏令时标志：<span class="number">1</span></div><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">1</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20140826</span>T013012Z 夏令时标志：<span class="number">1</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20140826</span>T013012Z 夏令时标志：<span class="number">1</span></div><div class="line">++++++++++[标记stTime.tm_isdst = <span class="number">0</span>]++++++++++</div><div class="line">stTime时间：<span class="number">20140826</span>T013012Z 夏令时标志：<span class="number">0</span></div><div class="line">运行tTime = mktime(&amp;stTime);语句之后</div><div class="line">stTime时间：<span class="number">20140826</span>T023012Z 夏令时标志：<span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>mktime对时间进行偏移的原理已经清楚了，那么代码事实上只是要保证无论在什么时区下，是否开启夏令时，时间的转换都不能出现偏移。那就置夏令时标志位为-1，系统会自动判断传入的时间是否是夏令时，并相应地标志夏令时标志位。</p>
<h4 id="5-相关延伸—时间转换对时区的考虑"><a href="#5-相关延伸—时间转换对时区的考虑" class="headerlink" title="5.相关延伸—时间转换对时区的考虑"></a>5.相关延伸—时间转换对时区的考虑</h4><p>MSDN里面对mktime的说明有下面这么一句话：</p>
<blockquote>
<p>After an adjustment to UTC, _mktime32 handles dates from midnight, January 1, 1970, to 03:14:07, January 19, 2038. _mktime64 handles dates from midnight, January 1, 1970 to 23:59:59, December 31, 3000. This adjustment may cause these functions to return -1 (cast to time_t, <strong>time32_t or </strong>time64_t) even though the date you specify is within range. For example, if you are in Cairo, Egypt, which is two hours ahead of UTC, two hours will first be subtracted from the date you specify in timeptr; this may now put your date out of range.</p>
</blockquote>
<p>意思大概说的是mktime把时间转换为时间戳并调整为UTC标准时间以后的时间范围。而后面一句说，这种调整为UTC标准的做法会引起函数返回-1，也就是说超出范围。比如你在埃及开罗，它比标准时间早两个小时，即使你在埃及时间是在“midnight, January 1, 1970, to 03:14:07, January 19, 2038”范围内，调用mktime，将转换为UTC时间，也就是加上两个小时就可能超出范围，函数返回-1。这就变相的在说明，mktime的时间转换是会默认认为你传入的时间是本地时间，而基准1970年1月1日则是UTC标准时间，那就先要将你传入的时间根据本机时区转换成UTC时间，再计算时间戳。也就是说在不同的本机系统时区下面，传入相同的年月日几分几秒得到的时间戳是不同的。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 夏令时 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win7下Jekyll折腾笔记]]></title>
      <url>https://corey600.github.io/2014/02/03/win7-jekyll/</url>
      <content type="html"><![CDATA[<ul>
<li><h4 id="安装RubyInstaller和DevKit"><a href="#安装RubyInstaller和DevKit" class="headerlink" title="安装RubyInstaller和DevKit"></a><em>安装RubyInstaller和DevKit</em></h4></li>
</ul>
<p>进入DevKit安装目录运行如下命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby dk.rb init</div><div class="line">ruby dk.rb install</div></pre></td></tr></table></figure>
<p>安装结果如下</p>
<pre><code>E:\Programs\DevKit&gt;ruby dk.rb init
[INFO] found RubyInstaller v1.9.3 at E:/Programs/Ruby193

Initialization complete! Please review and modify the auto-generated
&apos;config.yml&apos; file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.

E:\Programs\DevKit&gt;ruby dk.rb install
[INFO] Updating convenience notice gem override for &apos;E:/Programs/Ruby193&apos;
[INFO] Installing &apos;E:/Programs/Ruby193/lib/ruby/site_ruby/devkit.rb&apos;

E:\Programs\DevKit&gt;ruby dk.rb review
Based upon the settings in the &apos;config.yml&apos; file generated
from running &apos;ruby dk.rb init&apos; and any of your customizations,
DevKit functionality will be injected into the following Rubies
when you run &apos;ruby dk.rb install&apos;.

E:/Programs/Ruby193
</code></pre><a id="more"></a>
<ul>
<li><h4 id="安装效率更好的模版解释器"><a href="#安装效率更好的模版解释器" class="headerlink" title="安装效率更好的模版解释器"></a><em>安装效率更好的模版解释器</em></h4></li>
</ul>
<p>默认的<code>Maruku</code>是纯ruby的Markdown模版解释器，而<code>RDiscount</code>则是c写的模版解释器，效率更好。可以参考如下别人做的对比</p>
<blockquote>
<p>BlueCloth: 13.029987s total time, 00.130300s average<br>Maruku: 08.424132s total time, 00.084241s average<br>RDiscount: 00.082019s total time, 00.000820s average   </p>
</blockquote>
<p>运行以下命令安装</p>
<pre><code>gem install rdiscount --platform=ruby
</code></pre><p>安装成功也能证明之前Ruby和DevKit安装成功。但是因为rdiscount在ruby1.9.2版本上有个bug，安装rdiscount的时候可能会遇到问题，升级到1.9.3可以解决。安装成功结果如下</p>
<pre><code>E:\Programs\DevKit&gt;gem install rdiscount --platform=ruby
Fetching: rdiscount-2.1.7.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed rdiscount-2.1.7
1 gem installed
Installing ri documentation for rdiscount-2.1.7...
Installing RDoc documentation for rdiscount-2.1.7...

E:\Programs\DevKit&gt;
</code></pre><p>然后在站点下的<code>_config.yml</code>文件中加入以下配置</p>
<pre><code>markdown: rdiscount
</code></pre><ul>
<li><h4 id="更换淘宝的源及安装Jekyll"><a href="#更换淘宝的源及安装Jekyll" class="headerlink" title="更换淘宝的源及安装Jekyll"></a><em>更换淘宝的源及安装Jekyll</em></h4></li>
</ul>
<p>运行如下命令</p>
<pre><code>$ gem sources --remove http://rubygems.org/
$ gem sources -a http://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

http://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install jekyll
</code></pre><p>参考链接：<a href="http://ruby.taobao.org/" target="_blank" rel="external">RubyGems 镜像 - 淘宝网</a></p>
<p>以上安装最好在取得Win7管理员权限的情况下进行。</p>
<ul>
<li><h4 id="运行Jekyll"><a href="#运行Jekyll" class="headerlink" title="运行Jekyll"></a><em>运行Jekyll</em></h4></li>
</ul>
<p>本地运行Jekyll命令如下</p>
<pre><code>jekyll serve --watch #不加--watch则不会检测文件夹内的变化，即修改后需要重新启动jekyll
</code></pre>]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Win7 </tag>
            
            <tag> Jekyll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串匹配的Boyer-Moore算法]]></title>
      <url>https://corey600.github.io/2013/05/05/boyer-moore/</url>
      <content type="html"><![CDATA[<p>阮一峰大神贴的感觉很不错的字符串算法，转载过来以备以后查看。</p>
<p>原作者：<a href="http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html" target="_blank" rel="external">阮一峰</a></p>
<p><strong>正文如下：</strong></p>
<p>上一篇文章，我介绍了KMP算法。但是，它并不是效率最高的算法，实际采用并不多。各种文本编辑器的”查找”功能（Ctrl+F），大多采用Boyer-Moore算法。</p>
<p>Boyer-Moore算法不仅效率高，而且构思巧妙，容易理解。1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了这种算法。</p>
<a id="more"></a>
<p>下面，我根据Moore教授自己的例子来解释这种算法。</p>
<p><img src="/images/20130505/1.png" alt="Alt text"></p>
<p>假定字符串为”HERE IS A SIMPLE EXAMPLE”，搜索词为”EXAMPLE”。</p>
<p><img src="/images/20130505/2.png" alt="Alt text"></p>
<p>首先，”字符串”与”搜索词”头部对齐，从尾部开始比较。</p>
<p>这是一个很聪明的想法，因为如果尾部字符不匹配，那么只要一次比较，就可以知道前7个字符（整体上）肯定不是要找的结果。</p>
<p>我们看到，”S”与”E”不匹配。这时，<strong>“S”就被称为”坏字符”（bad character），即不匹配的字符。</strong>我们还发现，”S”不包含在搜索词”EXAMPLE”之中，这意味着可以把搜索词直接移到”S”的后一位。</p>
<p><img src="/images/20130505/3.png" alt="Alt text"></p>
<p>依然从尾部开始比较，发现”P”与”E”不匹配，所以”P”是”坏字符”。但是，”P”包含在搜索词”EXAMPLE”之中。所以，将搜索词后移两位，两个”P”对齐。</p>
<p><img src="/images/20130505/4.png" alt="Alt text"></p>
<p>我们由此总结出<strong>“坏字符规则”</strong>：</p>
<blockquote>
<p>后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置</p>
</blockquote>
<p>如果”坏字符”不包含在搜索词之中，则上一次出现位置为 -1。</p>
<p>以”P”为例，它作为”坏字符”，出现在搜索词的第6位（从0开始编号），在搜索词中的上一次出现位置为4，所以后移 6 - 4 = 2位。再以前面第二步的”S”为例，它出现在第6位，上一次出现位置是 -1（即未出现），则整个搜索词后移 6 - (-1) = 7位。</p>
<p><img src="/images/20130505/5.png" alt="Alt text"></p>
<p>依然从尾部开始比较，”E”与”E”匹配。</p>
<p><img src="/images/20130505/6.png" alt="Alt text"></p>
<p>比较前面一位，”LE”与”LE”匹配。</p>
<p><img src="/images/20130505/7.png" alt="Alt text"></p>
<p>比较前面一位，”PLE”与”PLE”匹配。</p>
<p><img src="/images/20130505/8.png" alt="Alt text"></p>
<p>比较前面一位，”MPLE”与”MPLE”匹配。<strong>我们把这种情况称为”好后缀”（good suffix），即所有尾部匹配的字符串。</strong>注意，”MPLE”、”PLE”、”LE”、”E”都是好后缀。</p>
<p><img src="/images/20130505/9.png" alt="Alt text"></p>
<p>比较前一位，发现”I”与”A”不匹配。所以，”I”是”坏字符”。</p>
<p><img src="/images/20130505/10.png" alt="Alt text"></p>
<p>根据”坏字符规则”，此时搜索词应该后移 2 - （-1）= 3 位。问题是，此时有没有更好的移法？</p>
<p><img src="/images/20130505/11.png" alt="Alt text"></p>
<p>我们知道，此时存在”好后缀”。所以，可以采用<strong>“好后缀规则”</strong>：</p>
<blockquote>
<p>后移位数 = 好后缀的位置 - 搜索词中的上一次出现位置</p>
</blockquote>
<p>举例来说，如果字符串”ABCDAB”的后一个”AB”是”好后缀”。那么它的位置是5（从0开始计算，取最后的”B”的值），在”搜索词中的上一次出现位置”是1（第一个”B”的位置），所以后移 5 - 1 = 4位，前一个”AB”移到后一个”AB”的位置。</p>
<p>再举一个例子，如果字符串”ABCDEF”的”EF”是好后缀，则”EF”的位置是5 ，上一次出现的位置是 -1（即未出现），所以后移 5 - (-1) = 6位，即整个字符串移到”F”的后一位。</p>
<p>这个规则有三个注意点：</p>
<blockquote>
<p>　　（1）”好后缀”的位置以最后一个字符为准。假定”ABCDEF”的”EF”是好后缀，则它的位置以”F”为准，即5（从0开始计算）。</p>
<p>　　（2）如果”好后缀”在搜索词中只出现一次，则它的上一次出现位置为 -1。比如，”EF”在”ABCDEF”之中只出现一次，则它的上一次出现位置为-1（即未出现）。</p>
<p>　　（3）如果”好后缀”有多个，则除了最长的那个”好后缀”，其他”好后缀”的上一次出现位置必须在头部。比如，假定”BABCDAB”的”好后缀”是”DAB”、”AB”、”B”，请问这时”好后缀”的上一次出现位置是什么？回答是，此时采用的好后缀是”B”，它的上一次出现位置是头部，即第0位。这个规则也可以这样表达：如果最长的那个”好后缀”只出现一次，则可以把搜索词改写成如下形式进行位置计算”(DA)BABCDAB”，即虚拟加入最前面的”DA”。</p>
</blockquote>
<p>回到上文的这个例子。此时，所有的”好后缀”（MPLE、PLE、LE、E）之中，只有”E”在”EXAMPLE”还出现在头部，所以后移 6 - 0 = 6位。</p>
<p><img src="/images/20130505/12.png" alt="Alt text"></p>
<p>可以看到，”坏字符规则”只能移3位，”好后缀规则”可以移6位。所以，<strong>Boyer-Moore算法的基本思想是，每次后移这两个规则之中的较大值。</strong></p>
<p>更巧妙的是，这两个规则的移动位数，只与搜索词有关，与原字符串无关。因此，可以预先计算生成《坏字符规则表》和《好后缀规则表》。使用时，只要查表比较一下就可以了。</p>
<p><img src="/images/20130505/13.png" alt="Alt text"></p>
<p>继续从尾部开始比较，”P”与”E”不匹配，因此”P”是”坏字符”。根据”坏字符规则”，后移 6 - 4 = 2位。</p>
<p><img src="/images/20130505/14.png" alt="Alt text"></p>
<p>从尾部开始逐位比较，发现全部匹配，于是搜索结束。如果还要继续查找（即找出全部匹配），则根据”好后缀规则”，后移 6 - 0 = 6位，即头部的”E”移到尾部的”E”的位置。</p>
]]></content>
      
        <categories>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win7脚本快速修改IP]]></title>
      <url>https://corey600.github.io/2013/04/02/change-ip/</url>
      <content type="html"><![CDATA[<p>由于寝室使用闪讯共享上网，时常需要手动修改IP，为了方便快速修改IP，查找资料写了如下的脚本。在Win7环境下将下面代码保存为ip.bat双击运行即可。</p>
<pre><code>@echo off
cls 
rem //设置变量，可以根据你的需要更改
set Nic1=&quot;本地连接&quot; 
set Nic2=&quot;无线网络连接&quot;
rem //以下依次为IP地址、子网掩码、网关、首选DNS、备用DNS 
set Addr=192.168.137.83
set Mask=255.255.255.0
set Gway=192.168.137.1
set Dns1=8.8.8.8
set Dns2=8.8.4.4
rem //以下为第二、三、四个ip和子网掩码、
set Addr2=192.168.137.133
set Addr3=192.168.137.183
set Addr4=192.168.137.233
set Mask2=255.255.255.0  
set Mask3=255.255.255.0 
set Mask4=255.255.255.0
echo                   IP地址快速修改工具  
echo ┌────────────────────────┐
echo │ 1 设置%Nic1%为【静态IP】作为【主机】      │
echo ├────────────────────────┤
echo │ 2 设置%Nic1%为【静态IP】作为【客户机】    │
echo ├────────────────────────┤
echo │ 3 设置%Nic1%为【动态IP】                  │
echo ├────────────────────────┤
echo │ 4 设置%Nic2%为【静态IP】作为【主机】   │
echo ├────────────────────────┤
echo │ 5 设置%Nic2%为【静态IP】作为【客户机】 │
echo ├────────────────────────┤
echo │ 6 设置%Nic2%为【动态IP】               │
echo ├────────────────────────┤
echo │ 7 退出                                         │
echo └────────────────────────┘ 
echo －－－请选择项目后回车
set /p answer=   
if %answer%==1 goto 1   
if %answer%==2 goto 2   
if %answer%==3 goto 3  
if %answer%==4 goto 4   
if %answer%==5 goto 5   
if %answer%==6 goto 6 
if %answer%==7 goto 7  

:1
set Nic=%Nic1%
goto StaticHost
:2
set Nic=%Nic1%
goto StaticClient 
:3
set Nic=%Nic1%
goto Dynamic 
:4
set Nic=%Nic2%
goto StaticHost
:5
set Nic=%Nic2%
goto StaticClient
:6
set Nic=%Nic2%
goto Dynamic
:7 
goto end

:StaticHost
echo 正在设置%Nic%为静态IP主机，请稍等...
echo. I P 地址 = %Gway%  
echo. 网关地址 = %Gway%   
echo. 子网掩码 = %Mask%   
netsh interface ipv4 set address name=%Nic% source=static addr=%Gway% mask=%Mask% gateway=%Gway% gwmetric=0 &gt;nul  
echo. 首选 DNS = %Dns1%   
netsh interface ipv4 set dns name=%Nic% source=static addr=%Dns1% register=PRIMARY &gt;nul   
echo. 备用 DNS = %Dns2%   
netsh interface ipv4 add dns name=%Nic% addr=%Dns2% index=2 &gt;nul   
echo ----    
echo 设置全部完成! 
ipconfig /all 
pause   
goto end   

:StaticClient 
echo 正在设置%Nic%为静态IP客户机，请稍等...   
rem //可以根据你的需要更改   
echo. I P 地址 = %addr%   
echo. 网关地址 = %Gway%  
echo. 子网掩码 = %Mask% 
netsh interface ipv4 set address name=%Nic% source=static addr=%addr% mask=%Mask% gateway=%Gway% gwmetric=0 &gt;nul  
echo. 首选 DNS = %Dns1%   
netsh interface ipv4 set dns name=%Nic% source=static addr=%Dns1% register=PRIMARY &gt;nul   
echo. 备用 DNS = %Dns2%   
netsh interface ipv4 add dns name=%Nic% addr=%Dns2% index=2 &gt;nul   
echo ----   
rem //下面是设置第二、三、四个ip   
echo. 第二个IP地址 = %Addr2%   
echo. 第三个IP地址 = %Addr3%  
echo. 第四个IP地址 = %Addr4%
echo. 第二个子网掩码 = %Mask2%
echo. 第三个子网掩码 = %Mask3%   
echo. 第四个子网掩码 = %Mask4%    
netsh interface ipv4 add address %Nic% %Addr2% %Mask2%   
netsh interface ipv4 add address %Nic% %Addr3% %Mask3% 
netsh interface ipv4 add address %Nic% %Addr4% %Mask4% 
echo ----   
echo 设置全部完成! 
ipconfig /all 
pause   
goto end  

:Dynamic
echo 正在设置%Nic%为动态IP，请稍等...   
echo. IP 地址正在从DHCP自动获取...   
netsh interface ip set address %Nic% dhcp   
echo. DNS地址正在从DHCP自动获取...   
netsh interface ip set dns %Nic% dhcp   
echo ----   
echo 设置全部完成!   
pause
goto end   
</code></pre>]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Win7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim的Tab使用技巧]]></title>
      <url>https://corey600.github.io/2013/03/29/vim-tab/</url>
      <content type="html"><![CDATA[<ol>
<li><p>设定 tab 的位置<br><code>:set tabstop=4</code></p>
</li>
<li><p>输入 tab 时自动将其转化为空格<br><code>:set expandtab</code><br>如果此时需要输入真正的 tab，则输入 Ctrl+V, tab，在 Windows 下是 Ctrl+Q, tab</p>
</li>
<li><p>将已存在的 tab 都转化为空格<br><code>:retab</code></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>设定编辑模式下 tab 的视在宽度<br><code>:set softtabstop</code><br>这不改变 tabstop，但让编辑的时候 tab 看起来是指定的宽度，输入 tab 时会插入的 tab 和空格的混合，比如 tabstop=4，softtabstop=10，那么插入 tab 时会将光标移动 10 个字符，可能会是两个 tab 加两个空格，这对 backspace 也有效。</p>
</li>
<li><p>解决 shiftwidth 和 tabstop 不等时的麻烦<br><code>:set smarttab</code><br>在行首输入 tab 时插入宽度为 shiftwidth 的空白，在其他地方按 tabstop 和 softtabstop 处理</p>
</li>
<li><p>将 tab 显示为可见字符<br><code>:set list listchars=tab:&gt;-</code><br>tab 将被显示为 &gt;—- 的形式</p>
</li>
<li><p>只在编辑特定类型的文件时展开tab  </p>
</li>
</ol>
<p>将如下代码加入 ~/.vimrc</p>
<pre><code>autocmd FileType * set tabstop=4|set shiftwidth=4|set noexpandtab
autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab
</code></pre><p>原文链接：<a href="http://www.cnblogs.com/panliang188/archive/2010/04/20/1715836.html" target="_blank" rel="external">Vim Tab使用技巧</a></p>
]]></content>
      
        <categories>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Github和Octopress搭建博客]]></title>
      <url>https://corey600.github.io/2013/02/28/use-github-and-octopress-create-blog/</url>
      <content type="html"><![CDATA[<p>最先玩过<a href="http://cheesefan.blog.163.com/" target="_blank" rel="external">网易博客</a>,但是网易博客广告太多（虽然相比同类型的第三方托管博客广告要少很多，这也是最初选择它的原因），同时定制性太差，代码高亮也在部分主题下面也显示得不是太好。后来分别在<a href="http://sae.sina.com.cn/" target="_blank" rel="external">新浪SAE</a>和<a href="http://developer.baidu.com/bae" target="_blank" rel="external">百度BAE</a>上搭建过<a href="http://cn.wordpress.org/" target="_blank" rel="external">WordPress</a>的博客，<a href="http://cn.wordpress.org/" target="_blank" rel="external">WordPress</a>有丰富的主题插件资源，但正是由于它功能太过完善，显得它有点庞大，加载速度让我难以接受。</p>
<p>后来得知<a href="https://github.com/" target="_blank" rel="external">Github</a>提供有<a href="http://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>功能，可以搭建静态博客，然后尝试了一下确实满足了博主们的最大自由性，因为博客的所有源码都是由你管理可以随意修改的。当然，最重要的是<a href="https://github.com/" target="_blank" rel="external">Github</a>免费与稳定性并存，有钱购买域名和空间的自然是选择商业的服务器空间更合适，但相对个人作为交流性的博客，<a href="http://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>已经足够了。</p>
<a id="more"></a>
<p>当然，静态博客在简约的同时，我还是希望它能够在主题上好看协调一点，而且在写作上如果直接写html文件的话就显得十分吃力，这时候<a href="http://octopress.org/" target="_blank" rel="external">OctoPress</a>和<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">MarkDown</a>，这两位左右手就该上场了。前者是开源的静态博客系统，后者是是一种轻量级的标记语言。这三者互相搭配再加上第三方评论系统就基本能搞定像本博一样的静态博客了。</p>
<h3 id="以下是以windows7作为环境的全部安装过程"><a href="#以下是以windows7作为环境的全部安装过程" class="headerlink" title="以下是以windows7作为环境的全部安装过程"></a>以下是以windows7作为环境的全部安装过程</h3><h4 id="一、安装软件和Octopress博客系统"><a href="#一、安装软件和Octopress博客系统" class="headerlink" title="一、安装软件和Octopress博客系统"></a>一、安装软件和Octopress博客系统</h4><p><a href="http://rubyforge.org/frs/download.php/75127/rubyinstaller-1.9.2-p290.exe" target="_blank" rel="external">RubyInstaller下载地址</a>/<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe" target="_blank" rel="external">DevKit下载地址</a>/<a href="https://msysgit.googlecode.com/files/Git-1.7.10-preview20120409.exe" target="_blank" rel="external">Git下载地址</a></p>
<p>RubyInstaller的安装界面</p>
<p><img src="/images/20130228/rbiu.jpg" alt="Alt text"></p>
<p>DevKit只需解压到一个文件夹</p>
<p><img src="/images/20130228/dkiu.jpg" alt="Alt text"></p>
<p>然后启动Ruby命令框，用CD进入存放DevKit的目录，执行以下命令</p>
<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre><p><img src="/images/20130228/dkiu2.jpg" alt="Alt text"></p>
<p>Git安装只需按照提示默认点击下一步，在“Configuring the line ending conversions”界面选择换行格式，选择“Checkout as-is, commit Unix-style line endings”(参考链接：<a href="http://www.cnblogs.com/sunny5156/archive/2012/10/23/2735799.html" target="_blank" rel="external">Win7上Git安装及配置过程</a>)，如下图</p>
<p><img src="/images/20130228/gitiu.jpg" alt="Alt text"></p>
<p>安装Octopress前要改变一个软件更新源，运行命令</p>
<pre><code>gem sources -a http://ruby.taobao.org/
gem sources -r http://rubygems.org/
gem sources -l
</code></pre><p><img src="/images/20130228/ociu.jpg" alt="Alt text"></p>
<p>安装Octopress到D:\Blog(参考链接：<a href="http://octopress.org/docs/setup/" target="_blank" rel="external">Octopress官方安装帮助</a>)，打开Git Bash，运行命令</p>
<pre><code>git clone git://github.com/imathis/octopress.git /d/Blog
</code></pre><p><img src="/images/20130228/ociu2.jpg" alt="Alt text"></p>
<p>打开Octopress安装目录下的<code>D:\Blog\Gemfile</code>，将第一行的source改成国内淘宝的<code>http://ruby.taobao.org/</code></p>
<p><img src="/images/20130228/ociu3.jpg" alt="Alt text"></p>
<p>进入Octopress安装目录，安装bundler，运行命令</p>
<pre><code>gem install bundler
bundle install
</code></pre><p><img src="/images/20130228/ociu4.jpg" alt="Alt text"></p>
<p>安装Octopress默认的主题，运行命令</p>
<pre><code>rake install
</code></pre><p><img src="/images/20130228/ociu5.jpg" alt="Alt text"></p>
<p>最后是生成和预览博客，运行命令</p>
<pre><code>rake generate
rake preview
</code></pre><p><img src="/images/20130228/ociu6.jpg" alt="Alt text"></p>
<p>然后浏览器打开页面<code>http://localhost:4000/</code>就可以预览博客了(参考链接：<a href="http://www.freehao123.com/octopress/" target="_blank" rel="external">用Octopress免费静态博客系统在Github免费空间上搭建个人网站</a>)。</p>
<h4 id="二、更改环境变量以支持生成有中文的文章"><a href="#二、更改环境变量以支持生成有中文的文章" class="headerlink" title="二、更改环境变量以支持生成有中文的文章"></a>二、更改环境变量以支持生成有中文的文章</h4><p>打开计算机–属性–高级系统设置–环境变量，新增<code>LANG</code>和<code>LC_ALL</code>，值都是<code>zh_CN.UTF-8</code>，完成后确定保存</p>
<p><img src="/images/20130228/hj.jpg" alt="Alt text"></p>
<h4 id="三、将博客提交到Github"><a href="#三、将博客提交到Github" class="headerlink" title="三、将博客提交到Github"></a>三、将博客提交到Github</h4><p>先申请一个<a href="https://github.com/" target="_blank" rel="external">Github</a>账号，再点击右上角用户名旁边的create a new repo创建一个项目(参考链接：<a href="http://www.freehao123.com/github-pages/" target="_blank" rel="external">免费开源Github Pages空间可绑域名搭建个人博客存放图片文件</a>)，注意repository name必须是<code>你的用户名.github.com</code>，这样最后才能直接用<code>你的用户名.github.com</code>这个二级域名直接访问你的页面</p>
<p><img src="/images/20130228/gh.jpg" alt="Alt text"></p>
<p>打开git bash，依次运行下列命令</p>
<pre><code>git config --global user.name &quot;用户名&quot;
git config --global user.email &quot;邮箱&quot;
git config --global credential.helper cache
</code></pre><p><img src="/images/20130228/gh2.jpg" alt="Alt text"></p>
<p>如入命令<code>cd ~/.ssh</code>看看本地有没有ssh keys。如果没有的话运行命令<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code>来创建SSH Keys。然后会要你选择保存的位置，直接回车就可。输入密码后创建成功。然后在你刚才保存的文件路径中产生一个id_rsa.pub文件。</p>
<p><img src="/images/20130228/gh3.jpg" alt="Alt text"></p>
<p>用记事本打开id_rsa.pub，复制里面的东西粘贴到Github项目的SSH Keys中</p>
<p><img src="/images/20130228/gh4.jpg" alt="Alt text"></p>
<p>输入命令<code>ssh -T git@github.com</code>，输入密码后测试是否可以成功连接。如下图就表明连接成功了</p>
<p><img src="/images/20130228/gh5.jpg" alt="Alt text"></p>
<p>最后进入博客安装目录<code>D:\Blog</code>运行如下命令，再打开你的Github的二级域名就可以看到刚刚提交的Octopress博客了</p>
<pre><code>rake setup_github_pages
rake generate
rake deploy
</code></pre><p><img src="/images/20130228/gh6.jpg" alt="Alt text"></p>
<h4 id="四、新建和发布页面"><a href="#四、新建和发布页面" class="headerlink" title="四、新建和发布页面"></a>四、新建和发布页面</h4><p>发布一个日志前，先在博客目录<code>D:\Blog\source\_posts\</code>中生成一个MD文件，类似<code>2013-03-10-title.markdown</code>，是日志的编辑文件。运行命令</p>
<pre><code>rake new_post[&quot;title&quot;]
</code></pre><p>如果想要新建一个页面，则可以运行命令</p>
<pre><code>rake new_page[&quot;about&quot;]
</code></pre><p>编辑MD文件需要使用markdown语法(参考链接：<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a>)。<br>文章编辑完成后，生成和发布则运行命令</p>
<pre><code>rake generate
rake deploy
</code></pre><p>本地预览命令。</p>
<pre><code>rake preview
</code></pre><p>退出预览命令是<br><code>Ctrl+C</code></p>
<h4 id="五、安装主题"><a href="#五、安装主题" class="headerlink" title="五、安装主题"></a>五、安装主题</h4><p>我现在用的主题是<a href="http://blog.justin.kelly.org.au/octopress-theme/" target="_blank" rel="external">justin-kelly</a>(<a href="https://github.com/wallace/justin-kelly-theme" target="_blank" rel="external">Github源码</a>)，安装方法是先进入博客目录<code>D:\Blog\</code>然后运行命令</p>
<pre><code>git clone https://github.com/wallace/justin-kelly-theme.git .themes/justin-kelly-theme
rake install[&apos;justin-kelly-theme&apos;]
rake generate
</code></pre><p>其他不错的主题：<a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html#overview" target="_blank" rel="external">slash</a>/<a href="http://panks.me/blog/2013/01/new-octopress-theme-fabric/" target="_blank" rel="external">Fabric</a>/<a href="https://github.com/rastersize/BlogTheme" target="_blank" rel="external">BlogTheme</a>/<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" target="_blank" rel="external">官方推荐</a></p>
<h4 id="六、添加分享到微博按钮"><a href="#六、添加分享到微博按钮" class="headerlink" title="六、添加分享到微博按钮"></a>六、添加分享到微博按钮</h4><p>在文件<code>source/_includes/post/sharing.html</code>中加入代码，效果如下</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sharing"</span>&gt;</span></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.weibo_share %&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> </span></div><div class="line">    <span class="attr">width</span>=<span class="string">"86"</span> </div><div class="line">    <span class="attr">scrolling</span>=<span class="string">"no"</span> </div><div class="line">    <span class="attr">height</span>=<span class="string">"16"</span> </div><div class="line">    <span class="attr">frameborder</span>=<span class="string">"0"</span> </div><div class="line">    <span class="attr">src</span>=</div><div class="line">      <span class="string">"http://hits.sinajs.cn/A1/weiboshare.html?url=</span><span class="template-variable">&#123;&#123; site.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;&#123; page.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;amp;type=6&amp;amp;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.weibo_uid %&#125;</span><span class="xml"><span class="tag"><span class="string">ralateUid=</span></span></span><span class="template-variable">&#123;&#123; site.weibo_uid &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;amp;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"><span class="tag"><span class="string">language=zh_cn"</span> <span class="attr">allowtransparency</span>=<span class="string">"true"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.twitter_tweet_button %&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://twitter.com/share"</span> <span class="attr">class</span>=<span class="string">"twitter-share-button"</span> <span class="attr">data-url</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; site.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;&#123; page.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">data-via</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; site.twitter_user &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">data-counturl</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; site.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;&#123; page.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> &gt;</span>Tweet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.google_plus_one %&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-plusone"</span> <span class="attr">data-size</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; site.google_plus_one_size &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.facebook_like %&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fb-like"</span> <span class="attr">data-send</span>=<span class="string">"true"</span> <span class="attr">data-width</span>=<span class="string">"450"</span> <span class="attr">data-show-faces</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于Liquid语法的关系，如果代码显示不完全，查看如下截图</p>
<p><img src="/images/20130228/dm.jpg" alt="Alt text"></p>
<p>然后在博客根目录下的配置文件<code>_config.yml</code>文件中加入代码</p>
<pre><code># Weibo
# Please refer to http://weibo.com/tool/weiboshow to get your uid and verifier 
weibo_uid: 1234567890       # your uid
weibo_verifier:    abc12ef3    # your verifier
weibo_fansline: 0   # How many lines for the fan list
weibo_show: true    # Whether you want your weibo content to be shown
weibo_pic: true     # Whether you want the pictures in weibo to be shown
weibo_skin: 10      # Please refer to http://weibo.com/tool/weiboshow
weibo_share: true   # Whether show the sharing button
</code></pre><p>其中uid和verifier需要去新浪<code>http://weibo.com/tool/weiboshow</code>获取。<code>rake generate</code>生成后就可以预览了。(参考链接：<a href="http://programus.github.com/blog/2012/03/04/share-weibo-button/" target="_blank" rel="external">为Octopress追加[分享到微博]按钮</a>/<a href="http://clark1231.iteye.com/blog/1553939" target="_blank" rel="external">增加微博的侧边栏</a>)</p>
<p>然后再推荐<a href="http://share.baidu.com/" target="_blank" rel="external">百度分享工具</a>，获取代码添加到<code>source/_includes/post/sharing.html</code>中即可，当然也可以分析一下代码，自己改写成如以上分享到微博一样的标准形式。</p>
<h4 id="七、代码高亮"><a href="#七、代码高亮" class="headerlink" title="七、代码高亮"></a>七、代码高亮</h4><p>修改<code>_config.yml</code>设置<code>pygments: true</code>，同时Win7上需要安装和配置好<a href="http://www.python.org/download/" target="_blank" rel="external">Python</a>。(参考链接：<a href="http://zyzhang.github.com/blog/2012/08/31/highlight-with-Jekyll-and-Pygments/" target="_blank" rel="external">用Jekyll和Pygments配置代码高亮</a>)</p>
<h4 id="八、部分界面修改"><a href="#八、部分界面修改" class="headerlink" title="八、部分界面修改"></a>八、部分界面修改</h4><p>头部导航菜单的修改可以打开编辑<code>source/_includes/custom/navigation.html</code>(参考链接：<a href="http://linmumu.me/octopress-theme-template.html" target="_blank" rel="external">Octopress 模板篇</a>)。</p>
<p>将最新评论添加到侧边栏，首先新建文件<code>source/_includes/custom/asides/recent_comment.html</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Recent Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://corey600.disqus.com/recent_comments_widget.js?num_items=5&amp;hide_avatars=1&amp;avatar_size=32&amp;excerpt_length=200"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在配置文件<code>/_config.yml</code>中的<code>default_asides</code>或者<code>blog_index_asides</code>或者<code>post_asides</code>或者<code>page_asides</code>中添加一项<code>custom/asides/recent_comment.html</code>，例如我的配置</p>
<pre><code>blog_index_asides: [custom/asides/links.html, asides/recent_posts.html, custom/asides/recent_comment.html]
</code></pre><p>开启disqus评论系统只需在配置文件<code>/_config.yml</code>中设置好用户名，当然如果要尝试其他第三方评论系统可以参考链接：<a href="http://ihavanna.org/Internet/2013-02/add-duoshuo-commemt-system-into-octopress.html" target="_blank" rel="external">为 Octopress 添加多说评论系统</a>。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Octopress </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下SublimeText2的G++和Python配置]]></title>
      <url>https://corey600.github.io/2013/02/07/ubuntu-sublime-text-2-g-plus-plus-and-python/</url>
      <content type="html"><![CDATA[<p>如果原本系统已经安装了g++和python2.7，并且配置好了环境变量，那么sublime本身默认的配置文件已经能够满足要求了。但是对于我这个用惯了codeblock的人来说，运行时不能在终端输入是无法忍受的。那么我就希望将sublime配置成codeblock那样跳出终端窗口来显示输出，并且能够输入。不多说，先贴出配置文件。</p>
<p>g++配置:</p>
<pre><code>{
    &quot;cmd&quot;: [&quot;g++&quot;, &quot;${file}&quot;, &quot;-o&quot;, &quot;${file_path}/${file_base_name}&quot;],
    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,
    &quot;working_dir&quot;: &quot;${file_path}&quot;,
    &quot;selector&quot;: &quot;source.c, source.c++&quot;,

    &quot;variants&quot;:
    [
        {
            &quot;name&quot;: &quot;Run&quot;,
            &quot;cmd&quot;:[&quot;x-terminal-emulator&quot;, &quot;-x&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;g++ &apos;${file}&apos; -o &apos;${file_path}/${file_base_name}&apos; &amp;&amp; &apos;${file_path}/${file_base_name}&apos; ;read -n1 -p &apos;press any key to continue.&apos;&quot;]
        }
    ]
}
</code></pre><a id="more"></a>
<p>python配置:</p>
<pre><code>{
    &quot;cmd&quot;:[&quot;x-terminal-emulator&quot;, &quot;-x&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;python -u &apos;${file}&apos; ;read -n1 -p &apos;press any key to continue.&apos;&quot;],
    //&quot;cmd&quot;: [&quot;python&quot;, &quot;-u&quot;, &quot;$file&quot;],
    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,
    &quot;selector&quot;: &quot;source.python&quot;
}
</code></pre><p>说明：<br>其中命令<code>x-terminal-emulator -x</code>是实现了跳出新的窗口，由于我用的是linux-mint，默认桌面环境是mate，如果是gnome那么命令可能应该是<code>gnome-terminal -x</code>。</p>
<p>而命令<code>;read -n1 -p ”press any key to continue.“</code>则是为了实现窗口在输出完毕后不立即关闭，而是再显示press any key to continue.并由你按下enter时窗口关闭。这里的any key其实并不是任意键，目前测试只接受英文字符和enter。</p>
<p>其他命令就不多说了，可以参考sublime的原有配置或者参考官网。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> SublimeText2 </tag>
            
            <tag> G++ </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下用Dnw烧写bin镜像(Ubuntu for TQ2440)]]></title>
      <url>https://corey600.github.io/2012/09/22/linux-dnw-bin-ubuntu-for-tq2440/</url>
      <content type="html"><![CDATA[<p>我们要用到的工具是C-kermit 和 dnw2。其中C-kermit是串口连接程序。而dnw2是用来向开发板下载程序的。<br>首先我们安装kermit，我们可以使用<code>#sudo apt-get install ckermit</code>来安装kermit。</p>
<p>下载完成之后还要对其进行配置。<code>#sudo vim /etc/kermit/kermrc</code></p>
<p><img src="/images/20120922/1.jpg" alt="Alt text"></p>
<a id="more"></a>
<p>set line /dev/ttyUSB0 (这里填写通过命令#dmesg看到的设备名。上图中红线部分。attached to ttyUSB0 说明已经附加到了ttyUSB0这个设备上了。)</p>
<pre><code>set speed 115200

set carrier-watch off

set handshake none

set flow-control none

robust

set file type bin

set file name lit

set rec pack 1000

set send pack 1000

set window 5
</code></pre><p>配置完以后的样子</p>
<p><img src="/images/20120922/2.jpg" alt="Alt text"></p>
<p>红色方框内的内容为添加内容。</p>
<p>使用以下命令打开kermit：<code>#sudo kermit</code></p>
<p>使用以下命令链接：<code>&gt;connect</code></p>
<p>就可以使用串口了。</p>
<p>切换：按下Ctrl+\ ,再按c 就跳回kermit。跳回串口控制，可以输入c,即connect命令。</p>
<p><img src="/images/20120922/3.jpg" alt="Alt text"></p>
<p>上图是使用kermit连接开发板。</p>
<p>接着说一下dnw2的使用。先把以下某大神写的代码保存成文件dnw2.c</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;usb.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;

#define QQ2440_SECBULK_IDVENDOR        0x5345
#define QQ2440_SECBULK_IDPRODUCT    0x1234

struct usb_dev_handle * open_port() {
    struct usb_bus *busses, *bus;

    usb_init();
    usb_find_busses();
    usb_find_devices();

    busses = usb_get_busses();
    for (bus = busses; bus; bus = bus-&gt;next) {
        struct usb_device *dev;
        for (dev = bus-&gt;devices; dev; dev = dev-&gt;next) {
            printf(&quot;idVendor:0x%x\t,ipProduct:0x%x\n&quot;,
                    dev-&gt;descriptor.idVendor, dev-&gt;descriptor.idProduct);
            if (QQ2440_SECBULK_IDVENDOR == dev-&gt;descriptor.idVendor
                    &amp;&amp; QQ2440_SECBULK_IDPRODUCT == dev-&gt;descriptor.idProduct) {
                printf(&quot;Target usb device found!\n&quot;);
                struct usb_dev_handle *hdev = usb_open(dev);
                if (!hdev) {
                    perror(&quot;Cannot open device&quot;);
                } else {
                    if (0 != usb_claim_interface(hdev, 0)) {
                        perror(&quot;Cannot claim interface&quot;);
                        usb_close(hdev);
                        hdev = NULL;
                    }
                }
                return hdev;
            }
        }
    }

    printf(&quot;Target usb device not found!\n&quot;);

    return NULL;
}

void usage() {
    printf(&quot;Usage: dnw2 &lt;file&gt;\n\n&quot;);
}

unsigned char* prepare_write_buf(char *filename, unsigned int *len) {
    unsigned char *write_buf = NULL;
    struct stat fs;

    int fd = open(filename, O_RDONLY);
    if (-1 == fd) {
        perror(&quot;Cannot open file&quot;);
        return NULL;
    }
    if (-1 == fstat(fd, &amp;fs)) {
        perror(&quot;Cannot get file size&quot;);
        goto error;
    }
    write_buf = (unsigned char*) malloc(fs.st_size + 10);
    if (NULL == write_buf) {
        perror(&quot;malloc failed&quot;);
        goto error;
    }

    if (fs.st_size != read(fd, write_buf + 8, fs.st_size)) {
        perror(&quot;Reading file failed&quot;);
        goto error;
    }

    printf(&quot;Filename : %s\n&quot;, filename);
    printf(&quot;Filesize : %d bytes\n&quot;, fs.st_size);

    *((u_int32_t*) write_buf) = 0x30000000; //download address
    *((u_int32_t*) write_buf + 1) = fs.st_size + 10; //download size;

    *len = fs.st_size + 10;
    return write_buf;
    error: if (fd != -1)
        close(fd);
    if (NULL != write_buf)
        free(write_buf);
    fs.st_size = 0;
    return NULL;
}

int main(int argc, char *argv[]) {
    if (2 != argc) {
        usage();
        return 1;
    }

    struct usb_dev_handle *hdev = open_port();
    if (!hdev) {
        return 1;
    }

    unsigned int len = 0;
    unsigned char* write_buf = prepare_write_buf(argv[1], &amp;len);
    if (NULL == write_buf)
        return 1;

    unsigned int remain = len;
    unsigned int towrite;
    printf(&quot;Writing data ...\n&quot;);
    while (remain) {
        towrite = remain &gt; 512 ? 512 : remain;
        if (towrite != usb_bulk_write(hdev, 0x03, write_buf + (len - remain),
                towrite, 3000)) {
            perror(&quot;usb_bulk_write failed&quot;);
            break;
        }
        remain -= towrite;
        printf(&quot;\r%d%\t %d bytes     &quot;, (len - remain) * 100 / len, len
                - remain);
        fflush(stdout);
    }
    if (0 == remain)
        printf(&quot;Done!\n&quot;);
    return 0;
}
</code></pre><p>然后安装 libusb 库<code>#sudo apt-get install libusb-dev</code></p>
<p>编译 dnw2.c 文件<code>#gcc dnw2.c -o dnw2 -lusb</code></p>
<p>把生成的可执行文件 dnw2 移动到 /opt/dnw 里面<code>#sudo mv dnw2 /opt/dnw</code></p>
<p>以root权限打开<code>#sudo vim /etc/profile</code></p>
<p>在文件末尾加上<code>export PATH=$PATH:/opt/dnw</code></p>
<p>保存退出后运行命令<code>#source /etc/profile</code></p>
<p>PC 链接 TQ2440开发板，在终端里面运行 <code>#sudo kermit</code>  ，然后connect连接，打开串口，按相应键进入 USB 传输</p>
<p>再开一个终端，输入<code>#sudo dnw2 &lt;文件完整路径&gt;</code></p>
<p>等待下载完毕。</p>
<p>参考链接：<br><a href="http://tanglz2005.blog.163.com/blog/static/8569819620122213535490/" target="_blank" rel="external">linux环境下安装dnw（for mini2440）</a><br><a href="http://hi.baidu.com/lv0xian/item/dd7e26321316b880c2cf29a5" target="_blank" rel="external">mini2440 在 ubuntu12.04 下 minicom 串口 dnw2 实验成功</a></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TQ2440 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于TQ2440上Linux-2.6.32.59的LCD驱动移植]]></title>
      <url>https://corey600.github.io/2012/09/09/lcd-tq2440-linux-2.6.32.59/</url>
      <content type="html"><![CDATA[<h4 id="1-简化LCD时钟计算方法："><a href="#1-简化LCD时钟计算方法：" class="headerlink" title="1.简化LCD时钟计算方法："></a>1.简化LCD时钟计算方法：</h4><p>修改<code>drivers/video/s3c2440fb.c</code>文件365行左右的函数<code>static void s3c2410fb_activate_var(struct fb_info *info)</code>如下：</p>
<pre><code>static void s3c2410fb_activate_var(struct fb_info *info)
{
    struct s3c2410fb_info *fbi = info-&gt;par;
    void __iomem *regs = fbi-&gt;io;
    int type = fbi-&gt;regs.lcdcon1 &amp; S3C2410_LCDCON1_TFT;
    struct fb_var_screeninfo *var = &amp;info-&gt;var;

    //修改以下两行
    struct s3c2410fb_mach_info *mach_info=fbi-&gt;dev-&gt;platform_data;
    struct s3c2410fb_display *default_display=mach_info-&gt;displays+mach_info-&gt;default_display;

    int clkdiv;

    clkdiv = DIV_ROUND_UP(s3c2410fb_calc_pixclk(fbi, var-&gt;pixclock), 2);

    dprintk(&quot;%s: var-&gt;xres  = %d\n&quot;, __func__, var-&gt;xres);
    dprintk(&quot;%s: var-&gt;yres  = %d\n&quot;, __func__, var-&gt;yres);
    dprintk(&quot;%s: var-&gt;bpp   = %d\n&quot;, __func__, var-&gt;bits_per_pixel);

    if (type == S3C2410_LCDCON1_TFT) {
        s3c2410fb_calculate_tft_lcd_regs(info, &amp;fbi-&gt;regs);
        --clkdiv;
        if (clkdiv &lt; 0)
            clkdiv = 0;
    } else {
        s3c2410fb_calculate_stn_lcd_regs(info, &amp;fbi-&gt;regs);
        if (clkdiv &lt; 2)
            clkdiv = 2;
    }

    //此处修改如下
    //fbi-&gt;regs.lcdcon1 |=  S3C2410_LCDCON1_CLKVAL(clkdiv);
    fbi-&gt;regs.lcdcon1 |=  S3C2410_LCDCON1_CLKVAL(default_display-&gt;setclkval);


    dprintk(&quot;new register set:\n&quot;);
    dprintk(&quot;lcdcon[1] = 0x%08lx\n&quot;, fbi-&gt;regs.lcdcon1);
    dprintk(&quot;lcdcon[2] = 0x%08lx\n&quot;, fbi-&gt;regs.lcdcon2);
    dprintk(&quot;lcdcon[3] = 0x%08lx\n&quot;, fbi-&gt;regs.lcdcon3);
    dprintk(&quot;lcdcon[4] = 0x%08lx\n&quot;, fbi-&gt;regs.lcdcon4);
    dprintk(&quot;lcdcon[5] = 0x%08lx\n&quot;, fbi-&gt;regs.lcdcon5);

    writel(fbi-&gt;regs.lcdcon1 &amp; ~S3C2410_LCDCON1_ENVID,
    regs + S3C2410_LCDCON1);
    writel(fbi-&gt;regs.lcdcon2, regs + S3C2410_LCDCON2);
    writel(fbi-&gt;regs.lcdcon3, regs + S3C2410_LCDCON3);
    writel(fbi-&gt;regs.lcdcon4, regs + S3C2410_LCDCON4);
    writel(fbi-&gt;regs.lcdcon5, regs + S3C2410_LCDCON5);

    s3c2410fb_set_lcdaddr(info);

    fbi-&gt;regs.lcdcon1 |= S3C2410_LCDCON1_ENVID,
    writel(fbi-&gt;regs.lcdcon1, regs + S3C2410_LCDCON1);
}
</code></pre><a id="more"></a>
<p>修改<code>arch/arm/mach-s3c2410/include/mach/fb.h</code>文件的40行左右的结构体<code>s3c2410fb_display</code>如下：</p>
<pre><code>struct s3c2410fb_display {
    unsigned type;

    unsigned short width;
    unsigned short height;

    unsigned short xres;
    unsigned short yres;
    unsigned short bpp;

    unsigned pixclock;

    //修改下面一行
    unsigned setclkval;

    unsigned short left_margin;  
    unsigned short right_margin;
    unsigned short hsync_len;    
    unsigned short upper_margin;
    unsigned short lower_margin;
    unsigned short vsync_len;

    unsigned long lcdcon5;
};
</code></pre><h4 id="2-添加多种LCD支持："><a href="#2-添加多种LCD支持：" class="headerlink" title="2.添加多种LCD支持："></a>2.添加多种LCD支持：</h4><p>修改<code>arch/arm/mach-s3c2440/mach-smdk2440.c</code>文件107行左右的结构体<code>s3c2410fb_display smdk2440_lcd_cfg __initdata</code>如下：</p>
<pre><code>static struct s3c2410fb_display smdk2440_lcd_cfg __initdata = {

    .lcdcon5 = S3C2410_LCDCON5_FRM565 |
     S3C2410_LCDCON5_INVVLINE |
     S3C2410_LCDCON5_INVVFRAME |
     S3C2410_LCDCON5_PWREN |
     S3C2410_LCDCON5_HWSWP,

    .type = S3C2410_LCDCON1_TFT,

    //修改以下
    #if defined(CONFIG_FB_S3C24X0_T240320)
    .width = 240,
    .height = 320,

    .pixclock = 100000,
    .setclkval = 0x4,
    .xres = 240,
    .yres = 320,
    .bpp = 16,
    .left_margin = 3,
    .right_margin = 6,
    .hsync_len = 1,
    .upper_margin = 2,
    .lower_margin = 1,
    .vsync_len = 1,

    #elif defined(CONFIG_FB_S3C24X0_S320240)
    .width = 320,
    .height = 240,

    .pixclock = 80000,
    .setclkval = 0x3,
    .xres = 320,
    .yres = 240,
    .bpp = 16,
    .left_margin = 15,
    .right_margin = 5,
    .hsync_len = 8,
    .upper_margin = 5,
    .lower_margin = 3,
    .vsync_len = 15,

    #elif defined(CONFIG_FB_S3C24X0_W320240)
    .width = 320,
    .height = 240,

    .pixclock = 80000,
    .setclkval = 0x3,
    .xres = 320,
    .yres = 240,
    .bpp = 16,
    .left_margin = 28,
    .right_margin = 24,
    .hsync_len = 42,
    .upper_margin = 6,
    .lower_margin = 2,
    .vsync_len = 12,

    #elif defined(CONFIG_FB_S3C24X0_LCD480272)
    .width = 480,
    .height = 272,

    .pixclock = 40000,
    .setclkval = 0x4,
    .xres = 480,
    .yres = 272,
    .bpp = 16,
    .left_margin = 19,
    .right_margin = 10,
    .hsync_len = 30,
    .upper_margin = 4,
    .lower_margin = 2,
    .vsync_len = 8,

    #elif defined(CONFIG_FB_S3C24X0_TFT640480)
    .width = 640,
    .height = 480,

    .pixclock = 40000,
    .setclkval = 0x1,
    .xres = 640,
    .yres = 480,
    .bpp = 16,
    .left_margin = 40,
    .right_margin = 67,
    .hsync_len = 31,
    .upper_margin = 5,
    .lower_margin = 25,
    .vsync_len = 1,

    #elif defined(CONFIG_FB_S3C24X0_TFT800480)
    .width = 800,
    .height = 480,

    .pixclock = 40000,
    .setclkval = 0x1,
    .xres = 800,
    .yres = 480,
    .bpp = 16,
    .left_margin = 15,
    .right_margin = 47,
    .hsync_len = 95,
    .upper_margin = 9,
    .lower_margin = 5,
    .vsync_len = 1,

    #elif defined(CONFIG_FB_S3C24X0_TFT800600)
    .width = 800,
    .height = 600,

    .pixclock = 40000,
    .setclkval = 0x1,
    .xres = 800,
    .yres = 600,
    .bpp = 16,
    .left_margin = 15,
    .right_margin = 47,
    .hsync_len = 95,
    .upper_margin = 9,
    .lower_margin = 5,
    .vsync_len = 1,

    #endif
};
</code></pre><p>修改同一文件235行左右的结构体<code>s3c2410fb_mach_info smdk2440_fb_info __initdata</code>如下：</p>
<pre><code>static struct s3c2410fb_mach_info smdk2440_fb_info __initdata = {
    .displays = &amp;smdk2440_lcd_cfg,
    .num_displays = 1,
    .default_display = 0,

    #if 0
    .gpccon = 0xaa940659,
    .gpccon_mask = 0xffffffff,
    .gpcup = 0x0000ffff,
    .gpcup_mask = 0xffffffff,
    .gpdcon = 0xaa84aaa0,
    .gpdcon_mask = 0xffffffff,
    .gpdup = 0x0000faff,
    .gpdup_mask = 0xffffffff,
    #endif

    //注释掉下面一行
    // .lpcsel = ((0xCE6) &amp; ~7) | 1&lt;&lt;4,
};
</code></pre><p>修改<code>drivers/video/Kconfig</code>文件1907到1986行左右如下：</p>
<pre><code># 修改下面两行
config FB_S3C24X0
tristate &quot;S3C24X0 LCD framebuffer support&quot;

depends on FB &amp;&amp; ARCH_S3C2410
select FB_CFB_FILLRECT
select FB_CFB_COPYAREA
select FB_CFB_IMAGEBLIT
---help---
 Frame buffer driver for the built-in LCD controller in the Samsung
 S3C2410 processor.

 This driver is also available as a module ( = code which can be
 inserted and removed from the running kernel whenever you want). The
 module will be called s3c2410fb. If you want to compile it as a module,
 say M here and read &lt;file:Documentation/kbuild/modules.txt&gt;.

 If unsure, say N.

# 修改以下
choice
prompt &quot;LCD select&quot;
depends on FB_S3C24X0
help
  S3C24x0 LCD size select

config FB_S3C24X0_S320240
boolean &quot;3.5 inch 320x240 Samsung LCD&quot;
depends on FB_S3C24X0
help
  3.5 inch 320x240 Samsung LCD

config FB_S3C24X0_W320240
boolean &quot;3.5 inch 320x240 WanXin or QiMei LCD&quot;
depends on FB_S3C24X0
help
  3.5 inch 320x240 WanXin or QiMei LCD

config FB_S3C24X0_T240320
boolean &quot;3.5 inch 240X320 Toshiba LCD&quot;
depends on FB_S3C24X0
help
  3.5 inch 240x320 Toshiba LCD

config FB_S3C24X0_TFT480272
boolean &quot;4.3 inch 480X272 TFT LCD&quot;
depends on FB_S3C24X0
help
  4.3 inch 480X272 TFT LCD

config FB_S3C24X0_TFT640480
boolean &quot;VGA 640x480&quot;
depends on FB_S3C24X0
help
  VGA 640x480

config FB_S3C24X0_TFT800480
boolean &quot;7 inch 800x480 LCD&quot;
depends on FB_S3C24X0
help
  7 inch 800x480 LCD

config FB_S3C24X0_TFT800600
boolean &quot;10.4 inch 800x600 TFT LCD&quot;
depends on FB_S3C24X0
help
  10.4 inch 800x480 TFT LCD

config FB_S3C24X0_TFT1024768
boolean &quot;VGA 1024x768&quot;
depends on FB_S3C24X0
help
  VGA 1024x768 TFT LCD

endchoice
# 修改以上

config FB_S3C2410_DEBUG
bool &quot;S3C2410 lcd debug messages&quot;

# 修改下面一行
depends on FB_S3C24X0

help
 Turn on debugging messages. Note that you can set/unset at run time
 through sysfs
}
</code></pre><p>修改<code>drivers/video/Makefile</code>文件116行左右如下：</p>
<pre><code>obj-$(CONFIG_FB_MAXINE)  += maxinefb.o
obj-$(CONFIG_FB_METRONOME)        += metronomefb.o
obj-$(CONFIG_FB_BROADSHEET)       += broadsheetfb.o
obj-$(CONFIG_FB_S1D13XXX)  += s1d13xxxfb.o
obj-$(CONFIG_FB_SH7760)  += sh7760fb.o
obj-$(CONFIG_FB_IMX)              += imxfb.o
obj-$(CONFIG_FB_S3C)  += s3c-fb.o

# 修改下面一行
obj-$(CONFIG_FB_S3C24X0)  += s3c2410fb.o

obj-$(CONFIG_FB_FSL_DIU)  += fsl-diu-fb.o
obj-$(CONFIG_FB_COBALT)           += cobalt_lcdfb.o
obj-$(CONFIG_FB_PNX4008_DUM)  += pnx4008/
obj-$(CONFIG_FB_PNX4008_DUM_RGB)  += pnx4008/
obj-$(CONFIG_FB_IBM_GXT4500)  += gxt4500.o
obj-$(CONFIG_FB_PS3)  += ps3fb.o
obj-$(CONFIG_FB_SM501)            += sm501fb.o
obj-$(CONFIG_FB_XILINX)           += xilinxfb.o
</code></pre>]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TQ2440 </tag>
            
            <tag> Linux </tag>
            
            <tag> LCD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完善TQ2440上Linux-2.6.32.59的串口驱动]]></title>
      <url>https://corey600.github.io/2012/09/06/the-serial-port-driver-tq2440-linux-2.6.32.59/</url>
      <content type="html"><![CDATA[<p>修改内核源码<code>arch/arm/mach-s3c2440/mach-smdk2440.c</code>文件的100行，将其改为：</p>
<pre><code>.ulcon =0x03,
</code></pre><p>修改<code>drivers/serial/samsung.c</code>文件的53行添加如下内容：</p>
<pre><code>#include &lt;mach/regs-gpio.h&gt;
</code></pre><p>然后在397行左右，函数<code>static int s3c24xx_serial_startup(struct uart_port *port)</code>之前添加</p>
<a id="more"></a>
<pre><code>extern void s3c2410_gpio_cfgpin(unsigned int pin, unsigned int function);

extern void s3c2410_gpio_pullup(unsigned int pin, unsigned int to);
</code></pre><p>然后在462行左右添加以下注释说明处的代码：</p>
<pre><code>dbg(&quot;s3c24xx_serial_startup ok\n&quot;);
//添加以下代码
if (port-&gt;line == 2) {
    s3c2410_gpio_cfgpin(S3C2410_GPIONO(S3C2410_GPIO_BANKH, 6), S3C2410_GPH6_TXD2);
    s3c2410_gpio_pullup(S3C2410_GPIONO(S3C2410_GPIO_BANKH, 6), 1);
    s3c2410_gpio_cfgpin(S3C2410_GPIONO(S3C2410_GPIO_BANKH, 7), S3C2410_GPH7_RXD2);
    s3c2410_gpio_pullup(S3C2410_GPIONO(S3C2410_GPIO_BANKH, 7), 1);
}
//添加以上代码
return ret;
 err:
s3c24xx_serial_shutdown(port);
return ret;
</code></pre><p>下面列出串口配置情况：</p>
<pre><code>Device Drivers  --&gt;
    Character devices  --&gt;
        Serial drivers  --&gt;
            &lt;&gt;8250/16550 and compatible serial support
              ***Non-8250 serial port support***
            &lt;*&gt;Samsung SoC serial support
            [*]Support for console on Samsung SoC serial port
            &lt;*&gt;Samsung S3C2440/S3C2442 Serial port support
</code></pre>]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TQ2440 </tag>
            
            <tag> Linux </tag>
            
            <tag> 串口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VBox中设置Linux的共享文件夹]]></title>
      <url>https://corey600.github.io/2012/09/03/vbox-set-linux-shared-folder/</url>
      <content type="html"><![CDATA[<p>1.首先在Vbox的菜单选项中控制=&gt;设置=&gt;共享文件夹中分配一个共享文件夹在主机下的路径，我在WIin8下的路径是<code>E:\Program Files\Oracle\shared</code>，设置了共享文件夹名称为shared，这个名称在Linux中挂载时输入命令时用到。</p>
<p><img src="/images/20120903/1.jpg" alt="Alt text"></p>
<a id="more"></a>
<p>2.在Vbox的菜单选项中设备=&gt;安装增强功能，然后你会发现虚拟机中挂载了一个名叫VBOXADDITIONS_xxx的盘，具体名字根据Vbox版本而定。在虚拟机路径<code>/media/</code>下出现一个同名文件夹，这个就是挂载的位置。在该路径下输入命令<code>#sudo ./VBoxLinuxAdditions.run</code>具体的文件名根据实际情况有所区别。这样安装增强功能就结束了。</p>
<p><img src="/images/20120903/2.jpg" alt="Alt text"></p>
<p>3.在虚拟机路径<code>/home/用户名/</code>下建一个对应的文件夹，注意这里的文件夹名不能和共享文件夹取相同名字，这里我就取名share。命令行输入<code>#mount -t vboxsf shared /home/fcx/share</code>(我的用户文件夹是fcx)，这样共享文件夹就设置完成了。可以弹出卷 VBOXADDITIONS_xxx 了。</p>
<p>4.开机自动挂载。vim打开<code>/etc/rc.local</code>文件把挂载命令写在exit 0之前，保存。</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VBox </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令行总汇(20120922更新)]]></title>
      <url>https://corey600.github.io/2012/08/31/linux-command/</url>
      <content type="html"><![CDATA[<h3 id="1-修改全局环境变量操作"><a href="#1-修改全局环境变量操作" class="headerlink" title="1.修改全局环境变量操作"></a>1.修改全局环境变量操作</h3><p>运行以下命令</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ getdit <span class="regexp">/etc/</span>profile</div></pre></td></tr></table></figure>
<p>在<code>/etc/profile</code>最后加上<code>export PATH=$PATH:[绝对路径]</code>，然后运行以下命令使之生效</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">source</span> <span class="regexp">/etc/</span>profile</div></pre></td></tr></table></figure>
<h4 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h4><p>其实如果打开<code>/etc/profile</code>，在最后我们可以发现有这样一段代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="_">-d</span> /etc/profile.d ]; <span class="keyword">then</span></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh; <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> [ -r <span class="variable">$i</span> ]; <span class="keyword">then</span></div><div class="line">      . <span class="variable">$i</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">  <span class="keyword">done</span></div><div class="line">  <span class="built_in">unset</span> i</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>也就是说，在<code>/etc/profile</code>执行的最后，它会自动的执行<code>/etc/profile.d</code>目录下的所有可读的文件。这就是我们将设置 <strong>JDK</strong> 环境变量的工作放在<code>/etc/profile.d/development.sh</code>的原因，可以不用修改操作系统自带的<code>/etc/profile</code>内容，方便系统的移植。</p>
<h3 id="2-察看环境变量操作"><a href="#2-察看环境变量操作" class="headerlink" title="2.察看环境变量操作"></a>2.察看环境变量操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<h3 id="3-解决ubuntu-12-04下TXT乱码问题"><a href="#3-解决ubuntu-12-04下TXT乱码问题" class="headerlink" title="3.解决ubuntu 12.04下TXT乱码问题"></a>3.解决ubuntu 12.04下TXT乱码问题</h3><figure class="highlight csp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gsettings set org.gnome.gedit.preferences.encodings auto-detected "[<span class="string">'UTF-8'</span>,<span class="string">'GB18030'</span>,<span class="string">'GB2312'</span>,<span class="string">'GBK'</span>,<span class="string">'BIG5'</span>,<span class="string">'CURRENT'</span>,<span class="string">'UTF-16'</span>]"</div></pre></td></tr></table></figure>
<h3 id="4-Ubuntu更改文件夹权限"><a href="#4-Ubuntu更改文件夹权限" class="headerlink" title="4.Ubuntu更改文件夹权限"></a>4.Ubuntu更改文件夹权限</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">600</span> ××× （只有所有者有读和写的权限）</div><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">644</span> ××× （所有者有读和写的权限，组用户只有读的权限）</div><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">700</span> ××× （只有所有者有读和写以及执行的权限）</div><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">666</span> ××× （每个人都有读和写的权限）</div><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">777</span> ××× （每个人都有读和写以及执行的权限）</div></pre></td></tr></table></figure>
<p>其中×××指文件名（也可以是文件夹名，不过要在chmod后加-ld）。命令的形式是</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo chmod -（代表类型）×××（所有者）×××（组用户）×××（其他用户）</div></pre></td></tr></table></figure>
<p>三位数的每一位都表示一个用户类型的权限设置。取值是0～7，即二进制的[000]~[111]。这个三位的二进制数的每一位分别表示读、写、执行权限。如000表示三项权限均无，而100表示只读。这样，我们就有了下面的对应：</p>
<ul>
<li>0 [000] 无任何权限    </li>
<li>4 [100] 只读权限    </li>
<li>6 [110] 读写权限    </li>
<li>7 [111] 读写执行权限</li>
</ul>
<h3 id="5-查看内核版本"><a href="#5-查看内核版本" class="headerlink" title="5.查看内核版本"></a>5.查看内核版本</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cat</span> /proc/<span class="keyword">version</span></div></pre></td></tr></table></figure>
<h3 id="6-修改目录所有者"><a href="#6-修改目录所有者" class="headerlink" title="6.修改目录所有者"></a>6.修改目录所有者</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>chown 用户名 文件名</div></pre></td></tr></table></figure>
<h3 id="7-删除非空目录"><a href="#7-删除非空目录" class="headerlink" title="7.删除非空目录"></a>7.删除非空目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf 目录名        ;其中参数<span class="_">-f</span>表示force.</div></pre></td></tr></table></figure>
<h3 id="8-执行make-menuconfig可能看到如下这样的错误"><a href="#8-执行make-menuconfig可能看到如下这样的错误" class="headerlink" title="8.执行make menuconfig可能看到如下这样的错误"></a>8.执行make menuconfig可能看到如下这样的错误</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*** Unable <span class="built_in">to</span> find <span class="keyword">the</span> ncurses libraries <span class="keyword">or</span> <span class="keyword">the</span></div><div class="line">*** required header <span class="built_in">files</span>.</div><div class="line">*** ‘make menuconfig’ requires <span class="keyword">the</span> ncurses libraries.</div><div class="line">*** Install ncurses (ncurses-devel) <span class="keyword">and</span> <span class="keyword">try</span> again.</div></pre></td></tr></table></figure>
<p>Ubuntu上解决办法如下：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> insatll ncurses-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迟到的赛后总结]]></title>
      <url>https://corey600.github.io/2011/11/27/After-the-game/</url>
      <content type="html"><![CDATA[<p><em>几百年前写的赛后总结，现在看看略逗。也迁到新博客来吧。以后随便看着回味着也好。</em></p>
<p>福州回来已经一个礼拜了，如果不算上个学期的邀请赛（不明所以，纯属酱油围观），这次应该是第一次参加正式比赛。</p>
<p>不像上海邀请赛，这次也算是做足了准备。厚厚的一叠模板，自己博客拉下来的备忘，各种公式，甚至算法导论，图论基础，高数书这种供起来的书也背去了。而且之前也是一直泡实验室，也旷了几节专业课（这对于我这个本着不听课也不能旷的孩子来说太少见了）。</p>
<a id="more"></a>
<p>之所以如此晃晃不安，大概是因为对这次比赛真是一点底都没有。开玩笑说，再给我一个暑假该多好，好多都还没学呢。对曰：那你今年别去好了，下一个暑假给你。我：囧～～～话说是再坏不过铁牌，也是意料之中，但既然去了，谁没有点小小的期待。</p>
<p>我们是11月18号就出发的。本来是以为只有6个多小时路程，估计会周六早上去，周日当天回来。估计也是发现这样太赶，提早去了。人生第二次做火车，第一次也是当时上海邀请赛。话说，我也太衰了，火车才见第二次呢。蓦然想起高三一个女同学，一个人去北京上大学，还不让父母陪，总觉得她DBL～～；我一直想保存这两张火车票的，可惜老刘要拿去报销的，我才不会傻到为了收藏自己付那钱～～穷人默默地交出火车票～</p>
<p>到福州已是下午了，雨下得挺大的。打的到宾馆，着实让我开心了下，怎么说也是四星级的对吧（可别说我虚荣，四星级什么的早餐肯定很丰富，后来也不出我所料，最喜欢那个丰盛的自助早餐了&gt;-&lt;）。我们一到宾馆，JJ哥和寂寞的基友—R哥就按耐不住了，马上下楼见情人～～武大和杭电联姻拉～～。</p>
<p>一夜无话～～等等，啊！我被蚊子咬死拉，这都十一月了，福州的蚊子很生猛啊～～</p>
<p>第二天，是开幕式和热身赛。还是昏昏欲睡的开幕式，之后的阿里巴巴技术沙龙也颇让我失望。记忆中上海邀请赛google的沙龙还是挺吸引人的。本来还希望阿里巴巴也来一次，可惜不管内容还是演讲人都没驱逐掉我的睡意～热身赛一般就是熟悉环境拉。A题倒是其次，只是其中第一题让我有点耿耿于怀，本还以为是博弈找规律，不过正解也太水吧，我却一头扎进找规律里去了～囧～～倒是热身赛之前的休息时间在休息室看了《失恋33天》，之前闲它太俗，不想看，但当休闲还是挺不错的。</p>
<p>一夜无话～～点了电蚊香，蚊子去死吧，哈哈哈～～确实无话了～</p>
<p>周日，正式比赛！！什么？主办方要求参赛队员都穿那条赠送的衣服？可是太小了，我都没穿过～～何况咱们还有魁梧的威哥呢！没办法，穿吧，外面再一件外套也看不出来拉～～威哥么，主办方居然还有备用的！威哥可就一下两条纪念衫喽～</p>
<p>好吧，说了那么多，言归正传，正式比赛开始了。</p>
<p>开场～开场～开场～～诶，开场了啊，好久都没有气球飘啊～～会不会上海的状况再现？不要啊，我不想死。</p>
<p>再说我们队，开场各看三题，我看的B题，题目描述长啊，看不懂啊～真跟做英语阅读似的，一直到半个多小时题意都一知半解。那时候全场已经飘了气球，最多是A题，我和杨神一看，哇象棋博弈？！！哦，不对，只是简单地判断是否被将死，棋子走法跟现实一样。简单思考之后觉得可行，就打算上机敲。杨神跟寂寞讲题意之后他也觉得可行，于是我就自告奋勇上机写。我当时想的是棋盘很小，可以把要被吃到的位置标记，但发现实现起来很麻烦。杨神提议直接判断，我考虑着这样确实更简单，但我当时男脑子已经混乱，就让杨神上机实现。后来寂寞上厕所回来，接替了杨神，确实当时他们两的脑袋比我清醒，wrong一次后就A了这题。当时场上已经飘了很多气球，HDU-FTD也早就AC了A题。当时我们的排名不好看。</p>
<p>接下来我们寻找能开的题。B题，题意还不清。C题意思倒是理解，但它要分两步实现，第一步有办法（虽然后来发现也是错的），但第二步想不到高效的算法。E题，貌似有技巧的一题，但我们琢磨着想先模拟下来用KMP匹配试试，超时就放弃它。这事交给杨神和寂寞了。我继续阅读B题。看久了终于让我琢磨出它的意思，但是和寂寞，杨神讲了他们也没什么想法，继续去琢磨E了～我鼓捣着发现单调队列可以做这题，就是之前要算一个时间有点小麻烦，啊哈交给寂寞去。于是我上机实现单调队列部分，让寂寞写计算时间的函数（好吧我承认时间也挺好计算的，但当时脑袋有点混乱，还是让寂寞来吧）。比赛时间早就过半了，再不出题可就危险了。幸好我B 题完成了，只要寂寞来个补充，我很有信心AC它（毕竟是很裸的单调队列）。完成，过sample，提交！哦，不对结果要long long型，刚还记着要改呢，我还是忘了。果断wrong。修改之后提交，还是wrong。我的信心被打击到了。提交打印了代码来检查错误。他两继续E 题。我是坚持代码有问题的，如果算法错误我就要崩溃了。因为时间已经不到两个小时，E题全场没多少AC，希望不大，其他题再开也没指望。如果我B题无法检查错误，或者重新选择新的算法，时间必定来不及，那我们就只能拿一个气球回家了。幸好，我不久就发现了代码的两个错误，一个是计算时间时少一个括号，还有就是月饼达到保质期我就算过期了，因当把比较时的等号去掉。上机，修改，过sample，提交！我默默的祈祷不要再wrong。返回Yes！哦买噶，我们三个都在心里欢呼了一下。此时还有不到20分钟就要封版了，我们排名60+。HDU-FTD还只有一题，HDU最寄希望的morris居然还没出题。我们估摸着这次运气好点应该有块铜牌回家了。当然那还不能松懈，他两继续E题，虽然希望不大。终于，在封版之前，morris过了一题。封版之后，B题气球纷飞，FTD也过了B ，morris也总算过了C题，两题了。我们有点小忐忑了，万一有太多队伍过题，我们会被挤出铜牌区。这时，E题也写好，提交，TLE，好吧，意料之中。时间也不多了，做等结束吧。随着主持人的倒计时，比赛正式结束。</p>
<p>我们算是有点小惊喜，但morris算是很郁闷了，卡题太久，简单的B 题也是没有debug完，时间不够，最终以两题排在很后面，尧神是要郁闷死了。</p>
<p>结束后在校园散步，福师的校园确实比杭电好啊，又大，远方还有云雾缭绕的山，当然作为师范学校，女生是哪里都是啊，与杭电的情景是正好相反啊。散步回去，在门口等待结果～志愿者进去很久都没有回来，让我等的有点小紧张。旁边不时有大牛们开心大笑，当然他们不可能为了一块铜牌，他们是为金牌，甚至进final。这且不去想它，大牛们总是让人仰望的。</p>
<p>结果不出所料，一块铜牌确实让我们很是惊喜，FTD也是一扫成都的郁闷，将铜牌捧到手。</p>
<p>一如往常，结束之后有主办方的晚宴招待。话说我是很期待的，但福州的口味着实让我们不能习惯，特别是传说中的佛跳墙，一口都咽不下，不过虾倒是挺大个的，反正要求不高，也算吃得挺好的。</p>
<p>老刘换了票，第二天要天刚亮就起床赶火车了，白爷说：上次起那么早还是高考那会呢。</p>
<p>回来火车上，和老刘还有好像是华师的教练做一个车厢，倒是听了不少大赛的许多趣闻。有点累，睡了会六个小时的回程也结束了。</p>
<p>在杭州下了车，感觉温度骤降，确实杭州是冷了，福州还有点闷热。</p>
<p>回来了，这酱油也算是打得小惊喜。但还是感觉自己才学了皮毛，要学的太多，再给我两个，三个暑假我也看不到大牛们的身影，但还是抱着最初的心态吧，只是觉得还想做这事，所以一直坚持，keep fighting！</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多校联合第十场总结]]></title>
      <url>https://corey600.github.io/2011/08/11/the-10th-school-union/</url>
      <content type="html"><![CDATA[<p><em>当年要求写的总结，也是不忍删掉迁移过来。</em></p>
<p>虽然上一场已经有些状态下滑的趋势，但是这一场的垫底还是出乎我们的意料。</p>
<p>昨天刚写过我们第一个组队赛总结，模糊写了一些所谓欠缺的地方，我承认，那是官方版的，其实真的没多少含金量。</p>
<a id="more"></a>
<p>今天真的真切感受到了我们的不足。</p>
<p>开场后，依然是各自随意走动，各自观题。事实证明，这样确实不行，很容易花费时间重复读题。还是我之前所知道的先分配题号看题，然后提醒擅长这方面的队友。但这也有缺点，题意容易传达不明确，造成误读题。避免这种错误的方法，其实就是尽量仔细读题，理解完全之后再来传达。而且如果题意本身就模糊地话，还是让主敲的队友再回去看题最好。</p>
<p>第二，就是要尽量早出题。其实只要不是太坑爹的比赛，还是有一道水体的。既然是水题就要保证正确性和出题速度。这方面，我自己是很欠缺的，所以签到题还是让思考较快的zjq来完成。比如今天的矩阵题，我敲出来已经很慢了，加上simple数据错误，导致迟迟未A，即时之后重判，也是因为我不够仔细没有减少时间。承认，这题的数据是很坑爹，管理员的态度也很坑爹，但是还是反应出了一些问题。</p>
<p>或许，在我构造好矩阵之后，将矩阵题交给zjq去思考那题DP可能结果会好一点。还有就是，我们队没有能写DP的，一般都是我和zjq临时上岗。而我如果思路清晰还好，如果乱了，就彻底乱了。就像今天的dp ，不就一个加单调优化的DP嘛，没有多少变化，但是三个人，死活没弄好…加强ＤＰ！！！</p>
<p>还有就是总是被题数据水坑，诚然正式比赛应该不会有太水的数据，但是这也透露出我们对于开题的勇气上还有欠缺。貌似好多队都有这种现象……</p>
<p>其实今天我感觉最深的是，我们比赛真的太乱，似乎有时候三个人都不知道干什么是最好的选择，总是这题看一下，那题敲一下，这题讨论一下。其实，我们虽然开题不多，但是讨论的题目还是挺多的。还有就是娇娇没有发现图论题，感觉就没有了动力，其他题目都不敢尝试，其实敲了就知道有些没那么坑爹（今天的除外哈）。</p>
<p>貌似真的有必要做一下分工了，然后再做重点突破…至于分工再细论吧…</p>
<p>我再说一点，我们一般到后场总是会泄气。比的好，会容易满足，比的不好会失去坚持的决心。我觉得这是大问题。但是要改，却是主观上的问题了。至于我自己，第一从小性格使然（这是坚决要改，擦，不把自己当人了），第二在后期太关注时间，容易焦虑，影响思考，变得烦躁（这我自己也纠结很久了，不知道有效的调整方法~~）。我不知道其他两位队友的原因（说不定被我影响了，囧），只是希望一起调整一下吧</p>
<p>最后就是学学几何吧，还没学过呢，今天被坑得很惨…………</p>
<p>额，最后想喊个XXX加油，可惜还没想好队名…再议吧~~~~</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
